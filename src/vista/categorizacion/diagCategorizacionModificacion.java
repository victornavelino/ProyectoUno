/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * diagCategorizacionGestion.java
 *
 * Created on 19/11/2011, 11:31:58
 */
package vista.categorizacion;

import controladores.DocumentoJpaController;
import entidades.Documento;
import entidades.Resolucion;
import entidades.UnidadAcademica;
import entidades.categorizacion.Categoria;
import entidades.categorizacion.CategoriaAnterior;
import entidades.categorizacion.CategoriaAsignada;
import entidades.categorizacion.CategoriaSolicitada;
import entidades.categorizacion.Categorizacion;
import entidades.categorizacion.ComisionCategorizacion;
import entidades.categorizacion.Llamado;
import entidades.categorizacion.ValorCategoria;
import entidades.operaciones.Operacion;
import entidades.persona.investigador.Investigador;
import entidades.usuario.Usuario;
import facade.*;
import includes.Comunes;
import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.Persistence;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import jxl.Workbook;
import jxl.format.Colour;
import jxl.format.Font;
import jxl.write.Label;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import vista.economico.diagModificarRendicion;
import vista.panelControl.diagEspecialidadInvestigacion;
import vista.panelControl.diagUnidadAcademica;
import vista.resoluciones.diagResolucionEleccion;

/**
 *
 * @author wbivanco
 */
public class diagCategorizacionModificacion extends javax.swing.JDialog {
    // Arraylist de items que va a ser dinamico con las resoluciones a agregar
    private ArrayList<String> datos;    
    private ArrayList<String> nombresArchivos;
    // Arralist con las resoluciones ya cargadas
    List<Documento> resoluciones;
    // Defino aqui el modelo de la lista 
    DefaultListModel modeloLista = new DefaultListModel();
    private Usuario usuario;

    /**
     * Creates new form diagCategorizacionGestion
     */
    public diagCategorizacionModificacion(java.awt.Frame parent, boolean modal, Usuario usuario) {
        super(parent, modal);
        initComponents();
        this.usuario=usuario;
        iniciarComponentes();
        cargarComboLlamado();
        cargarComboComision();
        cargarComboFacultad();
        cargarComboCategoriaAsignada();
        cargarComboCategoriaSolicitada();
        cargarComboCategoriaAnterior();
        cargarInvestigador();
        datos = new ArrayList<>();
        nombresArchivos = new ArrayList<>();
        obtenerCategorizacion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblInvestigador = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbLlamado = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        tfCondicion = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        dpSolicitada = new org.jdesktop.swingx.JXDatePicker();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cmbSolicitada = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstResoluciones = new javax.swing.JList();
        btnAgregarResolucion = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cmbAsignada = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        dpAsignada = new org.jdesktop.swingx.JXDatePicker();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        dpAnterior = new org.jdesktop.swingx.JXDatePicker();
        cmbAnterior = new javax.swing.JComboBox();
        btnGuardar = new javax.swing.JButton();
        btnQuitarResolucion = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        cmbComision = new javax.swing.JComboBox();
        cmbFacultad = new javax.swing.JComboBox();
        btnNuevaFacultad = new javax.swing.JButton();
        btnNuevaComision = new javax.swing.JButton();
        btnNuevoLlamado = new javax.swing.JButton();
        btnVerResolucion = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstResolucionesNuevas = new javax.swing.JList();
        btnEliminar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jBtnExportar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.title")); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.jPanel1.border.title"))); // NOI18N

        lblInvestigador.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblInvestigador.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.lblInvestigador.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(lblInvestigador, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblInvestigador)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.jPanel2.border.title"))); // NOI18N

        jLabel1.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.jLabel1.text")); // NOI18N

        cmbLlamado.setEnabled(false);
        cmbLlamado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbLlamadoActionPerformed(evt);
            }
        });

        jLabel2.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.jLabel2.text")); // NOI18N

        tfCondicion.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.tfCondicion.text")); // NOI18N
        tfCondicion.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.jLabel3.text")); // NOI18N

        dpSolicitada.setEnabled(false);
        dpSolicitada.setFormats("dd/MM/yyyy");

        jLabel4.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.jLabel4.text")); // NOI18N

        jLabel5.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.jLabel5.text")); // NOI18N

        cmbSolicitada.setEnabled(false);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.jLabel6.text")); // NOI18N

        lstResoluciones.setEnabled(false);
        lstResoluciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstResolucionesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lstResoluciones);

        btnAgregarResolucion.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.btnAgregarResolucion.text")); // NOI18N
        btnAgregarResolucion.setEnabled(false);
        btnAgregarResolucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarResolucionActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.jLabel7.text")); // NOI18N

        jLabel8.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.jLabel8.text")); // NOI18N

        cmbAsignada.setEnabled(false);

        jLabel9.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.jLabel9.text")); // NOI18N

        dpAsignada.setEnabled(false);
        dpAsignada.setFormats("dd/MM/yyyy");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.jLabel10.text")); // NOI18N

        jLabel11.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.jLabel11.text")); // NOI18N

        jLabel12.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.jLabel12.text")); // NOI18N

        dpAnterior.setEnabled(false);
        dpAnterior.setFormats("dd/MM/yyyy");

        cmbAnterior.setEnabled(false);

        btnGuardar.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.btnGuardar.text")); // NOI18N
        btnGuardar.setEnabled(false);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnQuitarResolucion.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.btnQuitarResolucion.text")); // NOI18N
        btnQuitarResolucion.setEnabled(false);
        btnQuitarResolucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarResolucionActionPerformed(evt);
            }
        });

        jLabel13.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.jLabel13.text")); // NOI18N

        jLabel14.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.jLabel14.text")); // NOI18N

        btnNuevaFacultad.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.btnNuevaFacultad.text")); // NOI18N
        btnNuevaFacultad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevaFacultadActionPerformed(evt);
            }
        });

        btnNuevaComision.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.btnNuevaComision.text")); // NOI18N
        btnNuevaComision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevaComisionActionPerformed(evt);
            }
        });

        btnNuevoLlamado.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.btnNuevoLlamado.text")); // NOI18N
        btnNuevoLlamado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoLlamadoActionPerformed(evt);
            }
        });

        btnVerResolucion.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.btnVerResolucion.text")); // NOI18N
        btnVerResolucion.setEnabled(false);
        btnVerResolucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerResolucionActionPerformed(evt);
            }
        });

        lstResolucionesNuevas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstResolucionesNuevasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(lstResolucionesNuevas);

        btnEliminar.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.btnEliminar.text")); // NOI18N
        btnEliminar.setEnabled(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbFacultad, 0, 331, Short.MAX_VALUE)
                            .addComponent(cmbLlamado, 0, 331, Short.MAX_VALUE)
                            .addComponent(cmbComision, 0, 331, Short.MAX_VALUE)
                            .addComponent(tfCondicion, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnNuevaComision)
                            .addComponent(btnNuevaFacultad)
                            .addComponent(btnNuevoLlamado)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbSolicitada, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbAsignada, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dpSolicitada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dpAsignada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dpAnterior, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jLabel3)
                            .addComponent(jLabel7)
                            .addComponent(jLabel10))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAgregarResolucion)
                                .addGap(18, 18, 18)
                                .addComponent(btnQuitarResolucion)
                                .addGap(115, 115, 115))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 121, Short.MAX_VALUE)
                                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(52, 52, 52)
                                        .addComponent(btnVerResolucion, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnEliminar)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jScrollPane1))))))
                .addGap(34, 34, 34))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(cmbFacultad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNuevaFacultad))
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(btnNuevaComision)
                    .addComponent(cmbComision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnNuevoLlamado)
                        .addComponent(jLabel1))
                    .addComponent(cmbLlamado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfCondicion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel3)
                    .addComponent(btnGuardar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cmbSolicitada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVerResolucion)
                    .addComponent(btnEliminar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(dpSolicitada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbAsignada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(dpAsignada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel10))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAgregarResolucion)
                            .addComponent(btnQuitarResolucion))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(cmbAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dpAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.jPanel3.border.border.title")), org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.jPanel3.border.title"))); // NOI18N

        jBtnExportar.setText(org.openide.util.NbBundle.getMessage(diagCategorizacionModificacion.class, "diagCategorizacionModificacion.jBtnExportar.text")); // NOI18N
        jBtnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnExportarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(239, 239, 239)
                .addComponent(jBtnExportar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBtnExportar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        guardarCategorizacion();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnAgregarResolucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarResolucionActionPerformed
        agregarResolucion();
    }//GEN-LAST:event_btnAgregarResolucionActionPerformed

    private void btnQuitarResolucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarResolucionActionPerformed
        quitarResolucion();
    }//GEN-LAST:event_btnQuitarResolucionActionPerformed

    private void cmbLlamadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbLlamadoActionPerformed
    }//GEN-LAST:event_cmbLlamadoActionPerformed

    private void btnNuevaFacultadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaFacultadActionPerformed
        diagUnidadAcademica diagUnidadAcademica = new diagUnidadAcademica(null, true, "Alta");
        diagUnidadAcademica.setLocation(Comunes.centrarDialog(diagUnidadAcademica));
        diagUnidadAcademica.setVisible(true);
        cargarComboFacultad();
    }//GEN-LAST:event_btnNuevaFacultadActionPerformed

    private void btnNuevoLlamadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoLlamadoActionPerformed
        diagLlamadoAlta diagLlamadoAlta = new diagLlamadoAlta(null, true, usuario);
        diagLlamadoAlta.setLocation(Comunes.centrarDialog(diagLlamadoAlta));
        diagLlamadoAlta.setVisible(true);
        cargarComboLlamado();
    }//GEN-LAST:event_btnNuevoLlamadoActionPerformed

    private void btnNuevaComisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaComisionActionPerformed
        diagComisionAlta diagComision = new diagComisionAlta(null, true, usuario);
        diagComision.setLocation(Comunes.centrarDialog(diagComision));
        diagComision.setVisible(true);
        cargarComboComision();
    }//GEN-LAST:event_btnNuevaComisionActionPerformed

    private void btnVerResolucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerResolucionActionPerformed
        Documento docuSeleccionado = (Documento) lstResoluciones.getSelectedValue();
        abrirArchivoResolucion(docuSeleccionado);
    }//GEN-LAST:event_btnVerResolucionActionPerformed

    private void lstResolucionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstResolucionesMouseClicked
        btnVerResolucion.setEnabled(true);
        btnEliminar.setEnabled(true);
    }//GEN-LAST:event_lstResolucionesMouseClicked

    private void lstResolucionesNuevasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstResolucionesNuevasMouseClicked
        btnQuitarResolucion.setEnabled(true);
    }//GEN-LAST:event_lstResolucionesNuevasMouseClicked

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        eliminarRendicion();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void jBtnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnExportarActionPerformed
        exportar();
    }//GEN-LAST:event_jBtnExportarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(diagCategorizacionModificacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(diagCategorizacionModificacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(diagCategorizacionModificacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(diagCategorizacionModificacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                diagCategorizacionModificacion dialog = new diagCategorizacionModificacion(new javax.swing.JFrame(), true,new Usuario());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarResolucion;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNuevaComision;
    private javax.swing.JButton btnNuevaFacultad;
    private javax.swing.JButton btnNuevoLlamado;
    private javax.swing.JButton btnQuitarResolucion;
    private javax.swing.JButton btnVerResolucion;
    private javax.swing.JComboBox cmbAnterior;
    private javax.swing.JComboBox cmbAsignada;
    private javax.swing.JComboBox cmbComision;
    private javax.swing.JComboBox cmbFacultad;
    private javax.swing.JComboBox cmbLlamado;
    private javax.swing.JComboBox cmbSolicitada;
    private org.jdesktop.swingx.JXDatePicker dpAnterior;
    private org.jdesktop.swingx.JXDatePicker dpAsignada;
    private org.jdesktop.swingx.JXDatePicker dpSolicitada;
    private javax.swing.JButton jBtnExportar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblInvestigador;
    private javax.swing.JList lstResoluciones;
    private javax.swing.JList lstResolucionesNuevas;
    private javax.swing.JTextField tfCondicion;
    // End of variables declaration//GEN-END:variables

    // MANEJO DE COMPONENTES
    private void gestionararComponentes(boolean estado) {
        cmbFacultad.setEnabled(estado);
        cmbComision.setEnabled(estado);
        btnNuevaComision.setEnabled(estado);
        btnNuevaFacultad.setEnabled(estado);
        btnNuevoLlamado.setEnabled(estado);
        tfCondicion.setEnabled(estado);
        cmbAnterior.setEnabled(estado);
        dpAnterior.setEnabled(estado);
        cmbAsignada.setEnabled(estado);
        dpAsignada.setEnabled(estado);
        cmbSolicitada.setEnabled(estado);
        dpSolicitada.setEnabled(estado);
        btnAgregarResolucion.setEnabled(estado);
        btnQuitarResolucion.setEnabled(false);
        btnVerResolucion.setEnabled(false);
        btnEliminar.setEnabled(false);
        lstResoluciones.setEnabled(estado);
        btnGuardar.setEnabled(estado);
    }

    private void iniciarComponentes() {
        this.setLocationRelativeTo(null);
        agregarCategorizacion();
        habilitarFechas();
    }

    private void agregarCategorizacion() {
        // Habilito Componentes
        gestionararComponentes(true);
        cmbLlamado.setEnabled(true);
        tfCondicion.requestFocus();
    }

    // MANEJO DE DATOS
    public void agregarFila(String resolucion, String camino){       
        nombresArchivos.add(resolucion);        
        datos.add(camino); 
    }

    public void quitarFila(int fila){ 
        nombresArchivos.remove(fila);  
        datos.remove(fila);           
    }

    public void cargarLista() {
        Comunes.cargarJList(lstResolucionesNuevas, nombresArchivos);
    }

    public void cargarLista(List<Documento> reso) {
        Comunes.cargarJList(lstResoluciones, reso);
    }

    public void limpiarLista() {
        for (int j = modeloLista.getSize() - 1; j >= 0; j--) {
            modeloLista.remove(j);
        }
    }
    
    private void quitarResolucionCargadas(int fila){
        resoluciones.remove(fila);          
    }

    private void agregarResolucion() { 
        JFileChooser fileChooser = new JFileChooser();
        int seleccion = fileChooser.showOpenDialog(null);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File fichero = fileChooser.getSelectedFile();          
            
            agregarFila(fichero.getName(),fichero.getAbsolutePath());
            cargarLista();
        }        
    }

    private void quitarResolucion() {
        quitarFila(lstResolucionesNuevas.getSelectedIndex());
        cargarLista();
    }

    private Investigador cargarInvestigador() {
        Investigador inve = diagInvestigadorBusqueda.investigadorSeleccionado;
        String ape = inve.getPersona().getApellido();
        String nom = inve.getPersona().getNombre();
        String cuil = inve.getPersona().getCuil();
        lblInvestigador.setText(ape + ", " + nom + " - CUIL: " + cuil);
        return inve;
    }

    public void obtenerCategorizacion() {
        Categorizacion cate = diagInvestigadorBusqueda.categoriaSeleccionada;

        if (cate.getCategoriaAsignada() != null) {
            cargarComboCategoriaAsignada(cate.getCategoriaAsignada().getValorCategoria());
            dpAsignada.setDate(cate.getCategoriaAsignada().getFechaCategoria());
        }
        if (cate.getCategoriaSolicitada() != null) {
            cargarComboCategoriaSolicitada(cate.getCategoriaSolicitada().getValorCategoria());
            dpSolicitada.setDate(cate.getCategoriaSolicitada().getFechaCategoria());
        }
        if (cate.getCategoriaAnterior() != null) {
            cargarComboCategoriaAnterior(cate.getCategoriaAnterior().getValorCategoria());
            dpAnterior.setDate(cate.getCategoriaAnterior().getFechaCategoria());
        }
        if (cate.getUnidadAcademica() != null) {
            cargarComboFacultad(cate.getUnidadAcademica());
        }
        if (cate.getComision() != null) {
            cargarComboComision(cate.getComision());
        }
        if (cate.getLlamado() != null) {
            cargarComboLlamado(cate.getLlamado());
        }
        if (cate.getCondicion() != null) {
            tfCondicion.setText(cate.getCondicion());
        }
        if (!cate.getResoluciones().isEmpty()) {
            resoluciones = cate.getResoluciones();
            cargarLista(resoluciones);
        }

    }

    private void cargarComboLlamado() {
        Comunes.cargarJComboConBlanco(cmbLlamado, LlamadoFacade.getInstance().llamadoTraerTodosOrdenadosFecha());
    }

    private void cargarComboLlamado(Llamado llamado) {
        cmbLlamado.setSelectedItem(llamado);
    }

    private void cargarComboFacultad() {
        Comunes.cargarJComboConBlanco(cmbFacultad, UnidadAcademicaFacade.getInstance().getTodasUnidadAcademica());
    }

    private void cargarComboFacultad(UnidadAcademica facu) {
        cmbFacultad.setSelectedItem(facu);
    }

    private void cargarComboComision() {
        Comunes.cargarJComboConBlanco(cmbComision, ComisionCategorizacionFacade.getInstance().comisionCategorizacionTodos());
    }

    private void cargarComboComision(ComisionCategorizacion comi) {
        cmbComision.setSelectedItem(comi);
    }

    private void cargarComboCategoriaAsignada() {
        Comunes.cargarJCombo(cmbAsignada, ValorCategoriaFacade.getInstance().listarTodosValorCategoria());
    }

    private void cargarComboCategoriaAsignada(ValorCategoria valor) {
        cmbAsignada.setSelectedItem(valor);
    }

    private void cargarComboCategoriaSolicitada() {
        Comunes.cargarJCombo(cmbSolicitada, ValorCategoriaFacade.getInstance().listarTodosValorCategoria());
    }

    private void cargarComboCategoriaSolicitada(ValorCategoria valor) {
        cmbSolicitada.setSelectedItem(valor);

    }

    private void cargarComboCategoriaAnterior() {
        Comunes.cargarJCombo(cmbAnterior, ValorCategoriaFacade.getInstance().listarTodosValorCategoria());
    }

    private void cargarComboCategoriaAnterior(ValorCategoria valor) {
        cmbAnterior.setSelectedItem(valor);
    }

    private void guardarCategorizacion() {
        validarCampos();
    }

    private void habilitarFechas() {
        dpSolicitada.setVisible(false);
        jLabel5.setVisible(false);
        dpAsignada.setVisible(true);
        jLabel9.setVisible(true);
        dpAnterior.setVisible(true);
        jLabel12.setVisible(true);
    }

    private void validarCampos() {
        boolean bandera = true;
        String error = "Error: \n";

        if (cmbComision.getSelectedItem().equals("--Seleccione--")) {
            bandera = false;
            error += "Debe elegir un valor para la Disciplina \n";
        }

        if (cmbFacultad.getSelectedItem().equals("--Seleccione--")) {
            bandera = false;
            error += "Debe elegir un valor para la Unidad Académica \n";
        }

        if (cmbLlamado.getSelectedItem().equals("--Seleccione--")) {
            bandera = false;
            error += "Debe elegir un valor para el Llamado \n";
        }

        if (cmbAnterior.getSelectedItem().equals("--Seleccione--")) {
            bandera = false;
            error += "Debe elegir un valor para la Categoría Anterior \n";
        }

        if (cmbAsignada.getSelectedItem().equals("--Seleccione--")) {
            bandera = false;
            error += "Debe elegir un valor para la Categoría Asignada \n";
        }

        if (cmbSolicitada.getSelectedItem().equals("--Seleccione--")) {
            bandera = false;
            error += "Debe elegir un valor para la Categoría Solicitada \n";
        }

        if (bandera == false) {
            JOptionPane.showMessageDialog(null, error);
        } else {
            guardarRegistro();
        }

    }

    private void guardarRegistro() {
        Categorizacion categorizacion = diagInvestigadorBusqueda.categoriaSeleccionada;

        Llamado llamado = (Llamado) cmbLlamado.getSelectedItem();
        UnidadAcademica facultad = (UnidadAcademica) cmbFacultad.getSelectedItem();
        ComisionCategorizacion comision = (ComisionCategorizacion) cmbComision.getSelectedItem();

        CategoriaAnterior cateAnterior = new CategoriaAnterior();
        ValorCategoria valeCateAnterior = (ValorCategoria) cmbAnterior.getSelectedItem();
        cateAnterior.setValorCategoria(valeCateAnterior);
        cateAnterior.setFechaCategoria(dpAnterior.getDate());

        CategoriaSolicitada cateSolicitada = new CategoriaSolicitada();
        ValorCategoria valeCateSolicitada = (ValorCategoria) cmbSolicitada.getSelectedItem();
        cateSolicitada.setValorCategoria(valeCateSolicitada);
        cateSolicitada.setFechaCategoria(dpSolicitada.getDate());

        CategoriaAsignada cateAsignada = new CategoriaAsignada();
        ValorCategoria valeCateAsignada = (ValorCategoria) cmbAsignada.getSelectedItem();
        cateAsignada.setValorCategoria(valeCateAsignada);
        cateAsignada.setFechaCategoria(dpAsignada.getDate());

        categorizacion.setLlamado(llamado);
        categorizacion.setComision(comision);
        categorizacion.setUnidadAcademica(facultad);

        categorizacion.setCondicion(tfCondicion.getText());
        categorizacion.setCategoriaSolicitada(cateSolicitada);
        categorizacion.setCategoriaAnterior(cateAnterior);
        categorizacion.setCategoriaAsignada(cateAsignada);
        if(datos.size() > 0){
            resoluciones = categorizacion.getResoluciones();
            for(int i=0; i<datos.size(); i++){
                Documento docu = guardarArchivoAdjunto(datos.get(i));
                //listaReso.add(docu);
                resoluciones.add(docu);
            }
            //categorizacion.setResoluciones(listaReso);
            categorizacion.setResoluciones(resoluciones);
        }

        CategorizacionFacade.getInstance().modificacion(categorizacion);
        Operacion operacion = new Operacion();
        operacion.setFecha(Comunes.obtenerFechaActualDesdeDB());
        operacion.setOperacion("Modificacion de Categorización");
        operacion.setUsuario(usuario);
        OperacionFacade.getInstance().alta(operacion);

        Investigador inve = diagInvestigadorBusqueda.investigadorSeleccionado;
        String ape = inve.getPersona().getApellido();
        String nom = inve.getPersona().getNombre();        

        JOptionPane.showMessageDialog(rootPane, "La categorización de \""
                + ape + ", " + nom + "\" ha sido guardada con éxito");
        this.dispose();
    }

    private void abrirArchivoResolucion(Documento docu) {
        try {
            Documento documento = docu;
            byte[] archivoInterno = documento.getContenidoArchivo();
            File archivo = File.createTempFile("tmp", documento.getNombreArchivo());
            archivo.deleteOnExit();
            try (FileOutputStream fos = new FileOutputStream(archivo)) {
                fos.write(archivoInterno);
            }
            if (Desktop.isDesktopSupported() == true) {
                Desktop desktop = Desktop.getDesktop();
                try {
                    if (archivo.exists() == true) {
                        desktop.open(archivo);
                    } else {
                        JOptionPane.showMessageDialog(null, "No se encontrar el archivo: " + archivo.getAbsolutePath(), "Aviso", JOptionPane.WARNING_MESSAGE);
                    }
                } catch (IOException e) {
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se puede ejecutar el comando de apertura en este sistema operativo", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        } catch (IOException ex) {
            Logger.getLogger(diagCategorizacionModificacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }    

    private Documento guardarArchivoAdjunto(String archivoElegido) {
       try {              
            File archivoEntrada = new File(archivoElegido);
            Documento d = new Documento();
            d.setNombreArchivo(archivoEntrada.getName());
            InputStream is = new FileInputStream(archivoEntrada); //lo abrimos. Lo importante es que sea un InputStream
            byte[] buffer = new byte[(int) archivoEntrada.length()]; //creamos el buffer
            is.read(buffer); //leemos el archivo al buffer
            d.setContenidoArchivo(buffer);
            new DocumentoJpaController(Persistence.createEntityManagerFactory("ProyectoUnoPU",ConexionFacade.PROPIEDADES)).create(d);             
            //rendicion.setArchivoRendicion(d);                
            return d;
        } catch (Exception ex) {
            Logger.getLogger(diagCategorizacionModificacion.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }       
    }

    private void eliminarRendicion() {
        int eleccion = JOptionPane.showConfirmDialog(rootPane, "Esta seguro "
                + "que desea eliminar La Resolución "
                + lstResoluciones.getSelectedValue() + " ?",
                "Confirma Eliminacion?", JOptionPane.YES_NO_OPTION);
        if (eleccion == 0) {
            quitarResolucionCargadas(lstResoluciones.getSelectedIndex());            
            cargarLista(resoluciones);
        }
    }

    private void exportar() {
        Investigador inve = diagInvestigadorBusqueda.investigadorSeleccionado;
        Categorizacion cate = diagInvestigadorBusqueda.categoriaSeleccionada;
        JFileChooser fc = new JFileChooser(System.getProperty("user.dir"));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos Excel", "xls");
        fc.setFileFilter(filter);
        fc.showSaveDialog(null); 
        File guardar = fc.getSelectedFile();
        if (guardar != null) {
            try {
                FileOutputStream archivo = new FileOutputStream(guardar.toString() + ".xls");
                WritableWorkbook workbook = Workbook.createWorkbook(archivo);
                WritableSheet sheet = workbook.createSheet("hoja 1", 0);
                WritableCellFormat formato= new WritableCellFormat();
                formato.setBackground(Colour.AQUA);
                addLabel(sheet, 0, 0,"Universidad Nacional de Catamarca",formato);
                addLabel(sheet, 0, 1,"Categorizaciones",formato );
                addLabel(sheet, 0, 2,"Unidad Académica",formato );
                addLabel(sheet, 1, 2,"Disciplina",formato );
                addLabel(sheet, 2, 2,"Apellido",formato);
                addLabel(sheet, 3, 2,"Nombre",formato );
                addLabel(sheet, 4, 2,"CUIL/CUIT",formato );
                addLabel(sheet, 5, 2,"Llamado",formato );
                addLabel(sheet, 6, 2,"Condición",formato );
                addLabel(sheet, 7, 2,"Categoría Solicitada",formato );
                addLabel(sheet, 8, 2,"Categoría Asignada",formato );
                addLabel(sheet, 9, 2,"Categría Anterior",formato );
                addLabel(sheet, 10, 2,"Resoluciones",formato );
                
                addLabelif(sheet, 0, 3,cate.getUnidadAcademica().toString());
                addLabelif(sheet, 1, 3,cate.getComision().toString() );
                addLabelif(sheet, 2, 3,inve.getPersona().getApellido());
                addLabelif(sheet, 3, 3,inve.getPersona().getNombre() );
                String cuil=inve.getPersona().getCuil()+"/"+inve.getPersona().getCuit();
                String cuillimpio=cuil.replaceAll("null", " ");
                addLabelif(sheet, 4, 3,cuillimpio );
                addLabelif(sheet, 5, 3,cate.getLlamado().toString() );
                addLabelif(sheet, 6, 3,cate.getCondicion().toString() );
                addLabelif(sheet, 7, 3,cate.getCategoriaSolicitada().toString() );
                addLabelif(sheet, 8, 3,cate.getCategoriaAsignada().toString() );
                addLabelif(sheet, 9, 3,cate.getCategoriaAnterior().toString() );
                String resol="";
                for(Documento d:cate.getResoluciones()){
                    resol+=" /"+ d.getNombreArchivo();
                }
                addLabelif(sheet, 10, 3,resol );
                workbook.write();
                workbook.close();
                archivo.close();
                JOptionPane.showMessageDialog(null, "Exportado Correctamente");

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error al Exportar", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (WriteException ex){
                System.out.println("Error guardando");
            }
        }
    }
    
    private void addLabel(WritableSheet sheet, int column, int row, String s) throws WriteException{
        Label label;
        label = new Label(column, row, s);
        sheet.addCell(label);
    }
    
    private void addLabel(WritableSheet sheet, int column, int row, String s,WritableCellFormat formato) throws WriteException{
        Label label;
        label = new Label(column, row, s,formato);
        sheet.addCell(label);
    }
    
    private void addLabelif(WritableSheet sheet, int column, int row, String s) throws WriteException{
        Label label;
        if(s!=null){
            label = new Label(column, row, s);
            sheet.addCell(label);
        }else{
            label = new Label(column, row, "");
            sheet.addCell(label);
        }
  }
}