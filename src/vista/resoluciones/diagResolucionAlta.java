/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * diagDecretoAlta.java
 *
 * Created on 23/06/2011, 11:06:28
 */
package vista.resoluciones;

import controladores.DocumentoJpaController;
import entidades.Documento;
import entidades.Resolucion;
import facade.ConexionFacade;
import facade.ResolucionFacade;
import includes.Comunes;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.FileChannel;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.commons.validator.routines.IntegerValidator;

/**
 *
 * @author carlos
 */
public class diagResolucionAlta extends javax.swing.JDialog {

    private Resolucion resolucion;
    private String tipoOperacion;

    /**
     * Creates new form diagDecretoAlta
     */
    public diagResolucionAlta(java.awt.Frame parent, boolean modal, String tipoOperacion) {
        super(parent, modal);
        this.tipoOperacion = tipoOperacion;
        initComponents();
        inicializarComponentes();
    }

    public diagResolucionAlta(java.awt.Frame parent, boolean modal, String tipoOperacion, Resolucion resolucion) {
        super(parent, modal);
        this.tipoOperacion = tipoOperacion;
        this.resolucion = resolucion;
        initComponents();
        inicializarComponentes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pnCargar = new javax.swing.JPanel();
        tfRutaCargaResolucion = new javax.swing.JTextField();
        btnEscogerArchivo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        tfNumeroResolucion = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        spnAnio = new javax.swing.JSpinner();
        btnGuardar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDescripcion = new javax.swing.JTextArea();
        chkResolucion = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Alta de Resolución");

        pnCargar.setBorder(javax.swing.BorderFactory.createTitledBorder("Cargar Archivo"));

        tfRutaCargaResolucion.setEditable(false);

        btnEscogerArchivo.setText("Cargar");
        btnEscogerArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEscogerArchivoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnCargarLayout = new javax.swing.GroupLayout(pnCargar);
        pnCargar.setLayout(pnCargarLayout);
        pnCargarLayout.setHorizontalGroup(
            pnCargarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCargarLayout.createSequentialGroup()
                .addComponent(tfRutaCargaResolucion, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEscogerArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );
        pnCargarLayout.setVerticalGroup(
            pnCargarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCargarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(tfRutaCargaResolucion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnEscogerArchivo))
        );

        jLabel1.setText("Número");

        tfNumeroResolucion.setText("0");

        jLabel2.setText("Año");

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        jLabel3.setText("Descripción");

        taDescripcion.setColumns(20);
        taDescripcion.setRows(5);
        jScrollPane1.setViewportView(taDescripcion);

        chkResolucion.setText("¿No Es Resolución?");
        chkResolucion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkResolucionItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(chkResolucion)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfNumeroResolucion, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnCargar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(243, 243, 243)
                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnCargar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfNumeroResolucion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnAnio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(chkResolucion))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEscogerArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEscogerArchivoActionPerformed
        cargarResolucion();
}//GEN-LAST:event_btnEscogerArchivoActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        guardarArchivo();
}//GEN-LAST:event_btnGuardarActionPerformed

    private void chkResolucionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkResolucionItemStateChanged
        if (chkResolucion.isSelected()) {
            tfNumeroResolucion.setText("0");
            tfNumeroResolucion.setEnabled(false);
            spnAnio.setEnabled(false);
        } else {
            tfNumeroResolucion.setEnabled(true);
            spnAnio.setEnabled(true);
        }

    }//GEN-LAST:event_chkResolucionItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                diagResolucionAlta dialog = new diagResolucionAlta(new javax.swing.JFrame(), true, new String());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEscogerArchivo;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JCheckBox chkResolucion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnCargar;
    private javax.swing.JSpinner spnAnio;
    private javax.swing.JTextArea taDescripcion;
    private javax.swing.JTextField tfNumeroResolucion;
    private javax.swing.JTextField tfRutaCargaResolucion;
    // End of variables declaration//GEN-END:variables

    public Resolucion getResolucion() {
        return resolucion;
    }

    private void inicializarComponentes() {
        switch (tipoOperacion) {
            case "Alta":
                establecerAnoActual();
                break;
            case "Modificación":
                //anulamos ya que el archivo puede haberse cargado de cualquier pc
                //asi que es al vicio que este habilitado
                tfRutaCargaResolucion.setEnabled(false);
                btnEscogerArchivo.setEnabled(false);
                try {
                    tfNumeroResolucion.setText(String.valueOf(resolucion.getNumero()));
                } catch (Exception e) {
                }
                try {
                    spnAnio.setValue(resolucion.getAno());
                } catch (Exception e) {
                }
                taDescripcion.setText(resolucion.getDescripcion());

                break;
            case "Consulta":
                tfNumeroResolucion.setText(String.valueOf(resolucion.getNumero()));
                taDescripcion.setText(resolucion.getDescripcion());
                spnAnio.setValue(resolucion.getAno());
                tfNumeroResolucion.setEditable(false);
                taDescripcion.setEditable(false);
                tfRutaCargaResolucion.setEditable(false);
                btnEscogerArchivo.setVisible(false);
                break;
        }
    }

    private void establecerAnoActual() {
        Date fechaActual = Comunes.obtenerFechaActualDesdeDB();
        Calendar calendario = Calendar.getInstance();
        calendario.setTime(fechaActual);
        spnAnio.setValue(calendario.get(Calendar.YEAR));
    }

    private void cargarResolucion() {
        JFileChooser fileChooser = new JFileChooser();
        int seleccion = fileChooser.showOpenDialog(null);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File fichero = fileChooser.getSelectedFile();
            tfRutaCargaResolucion.setText(fichero.getAbsolutePath());
        }
    }

    private void guardarArchivo() {
        if (validarDatos()) {

            switch (tipoOperacion) {
                case "Alta": {
                    File archivoEntrada = new File(tfRutaCargaResolucion.getText());
                    if (longitudArchivoValida(archivoEntrada)) {
                        InputStream is = null;
                        try {
                            Documento d = new Documento();
                            d.setNombreArchivo(archivoEntrada.getName());
                            is = new FileInputStream(archivoEntrada);
                            byte[] buffer = new byte[(int) archivoEntrada.length()]; //creamos el buffer
                            is.read(buffer); //leemos el archivo al buffer
                            d.setContenidoArchivo(buffer);
                            new DocumentoJpaController(Persistence.createEntityManagerFactory("ProyectoUnoPU", ConexionFacade.PROPIEDADES)).create(d);
                            resolucion = new Resolucion();
                            resolucion.setAno((Integer) spnAnio.getValue());
                            resolucion.setDescripcion(taDescripcion.getText());
                            resolucion.setNumero(Long.parseLong(tfNumeroResolucion.getText()));
                            resolucion.setDocumento(d);
                            if (!new ResolucionFacade().existe(resolucion) || resolucion.getNumero() == 0) {
                                new ResolucionFacade().alta(resolucion);
                                JOptionPane.showMessageDialog(null, "La creación de la Resolución "
                                        + "se ha realizado correctamente");
                                this.dispose();
                            } else {
                                JOptionPane.showMessageDialog(null, "Ya se encuentra agregada "
                                        + "una resolución con el mismo número y año que la que "
                                        + "desea agregar", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                            this.dispose();
                        } catch (FileNotFoundException ex) {
                            Logger.getLogger(diagResolucionAlta.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (IOException ex) {
                            Logger.getLogger(diagResolucionAlta.class.getName()).log(Level.SEVERE, null, ex);
                        } finally {
                            try {
                                if (is != null) {
                                    is.close();
                                }
                            } catch (IOException ex) {
                                Logger.getLogger(diagResolucionAlta.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Archivo demasiado Grande, debe ser menor a 15 MegaBytes");
                    }
                    break;
                }
                case "Modificación": {
                    InputStream is = null;
//                    try {
//                        File archivoEntrada = new File(tfRutaCargaResolucion.getText());
//                        Documento d = new Documento();
//                        d.setNombreArchivo(archivoEntrada.getName());
//                        is = new FileInputStream(archivoEntrada);
//                        byte[] buffer = new byte[(int) archivoEntrada.length()]; //creamos el buffer
//                        is.read(buffer); //leemos el archivo al buffer
//                        d.setContenidoArchivo(buffer);
//                        new DocumentoJpaController(Persistence.createEntityManagerFactory("ProyectoUnoPU", ConexionFacade.PROPIEDADES)).create(d);
                        try {
                            resolucion.setAno((Integer) spnAnio.getValue());
                        } catch (Exception e) {
                        }
                        try {
                            resolucion.setNumero(Long.parseLong(tfNumeroResolucion.getText()));
                        } catch (Exception e) {
                        }
                        resolucion.setDescripcion(taDescripcion.getText());
                        
                        //resolucion.setDocumento(d);
                        new ResolucionFacade().modificar(resolucion);
                        JOptionPane.showMessageDialog(null, "La modificación de la Resolución "
                                + "se ha realizado correctamente");
                        this.dispose();
                        break;
//                    } catch (FileNotFoundException ex) {
//                        Logger.getLogger(diagResolucionAlta.class.getName()).log(Level.SEVERE, null, ex);
//                    } catch (IOException ex) {
//                        Logger.getLogger(diagResolucionAlta.class.getName()).log(Level.SEVERE, null, ex);
//                    } finally {
//                        try {
//                            if (is != null) {
//                                is.close();
//                            }
//                        } catch (IOException ex) {
//                            Logger.getLogger(diagResolucionAlta.class.getName()).log(Level.SEVERE, null, ex);
//                        }
//                    }
                }
                case "Consulta":
                    this.dispose();
                    break;
            }

        }
    }

    private boolean validarDatos() {
        boolean flag = false;
        if (!taDescripcion.getText().isEmpty()) {
            if (!tfRutaCargaResolucion.getText().equals("")||tipoOperacion.equals("Modificación")) {
                if (IntegerValidator.getInstance().isValid(tfNumeroResolucion.getText())) {
                    if (IntegerValidator.getInstance().isValid(spnAnio.getValue().toString())) {
                        flag = true;
                    } else {
                        JOptionPane.showMessageDialog(null, "Año no válido",
                                "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Número de Resolución no válido",
                            "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(null, "Debe escoger un archivo de entrada",
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe ingresar una descripción",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
        return flag;
    }

    private boolean longitudArchivoValida(File archivoEntrada) {
        // Get length of file in bytes
        long fileSizeInBytes = archivoEntrada.length();
        // Convert the bytes to Kilobytes (1 KB = 1024 Bytes)
        long fileSizeInKB = fileSizeInBytes / 1024;
        // Convert the KB to MegaBytes (1 MB = 1024 KBytes)
        long fileSizeInMB = fileSizeInKB / 1024;
        return fileSizeInMB < 15;

    }
}
