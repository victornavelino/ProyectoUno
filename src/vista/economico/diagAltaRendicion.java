/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * diagAltaRendicion.java
 *
 * Created on 14/08/2012, 12:03:14
 */
package vista.economico;

import controladores.DocumentoJpaController;
import entidades.Documento;
import entidades.economico.Cobro;
import entidades.economico.PagoEconomico;
import entidades.economico.Rendicion;
import entidades.economico.RendicionDetalle;
import entidades.operaciones.Operacion;
import entidades.proyecto.Proyecto;
import entidades.usuario.Usuario;
import facade.ConexionFacade;
import facade.OperacionFacade;
import includes.Comunes;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.Persistence;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.validator.routines.BigDecimalValidator;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import java.util.Collections;

/**
 *
 * @author walter
 */
public class diagAltaRendicion extends javax.swing.JDialog {
    // Defino objeto de cobro para poder guardar la rendicion en este cobro

    Cobro cobroElegido;
    boolean botonPresionado;
    // Defino aqui el modelo de la tabla para que lo cree una sola vez
    DefaultTableModel modeloTabla = new DefaultTableModel() {

        @Override
        public boolean isCellEditable(int fila, int columna) {
            return false;
        }
    };
    ArrayList<RendicionDetalle> listaRendicionesDetalle = new ArrayList<RendicionDetalle>();
    
    // Formateo las fechas
    SimpleDateFormat formato = new SimpleDateFormat("dd-MM-yyyy");
    Proyecto proyectoSeleccionado = new Proyecto();
    // Lo pongo aqui para que sea posible acceder desde cualquier metodo
    Rendicion rendicion = new Rendicion();
    // Sting en donde guardo el archivo de la rendicion
    String archivoRendicion;
    
    private Usuario usuario;

    public Proyecto getProyectoSeleccionado() {
        return proyectoSeleccionado;
    }

    public void setProyectoSeleccionado(Proyecto proyectoSeleccionado) {
        this.proyectoSeleccionado = proyectoSeleccionado;
    }

    public String getArchivoRendicion() {
        return archivoRendicion;
    }

    public void setArchivoRendicion(String archivoRendicion) {
        this.archivoRendicion = archivoRendicion;
    }

    public boolean isBotonPresionado() {
        return botonPresionado;
    }

    public void setBotonPresionado(boolean botonPresionado) {
        this.botonPresionado = botonPresionado;
    }

    /**
     * Creates new form diagAltaRendicion
     */
    public diagAltaRendicion(java.awt.Frame parent, boolean modal, Proyecto proye, Usuario usuario) {
        super(parent, modal);
        initComponents();
        this.usuario = usuario;
        setProyectoSeleccionado(proye);
        inicializarComponentes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tfMonto = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        dpFechaRendicion = new org.jdesktop.swingx.JXDatePicker();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taObservacion = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDetalle = new javax.swing.JTable();
        btnImportar = new javax.swing.JButton();
        btnAgregarDetalleRendicion = new javax.swing.JButton();
        btnEliminarDetalleRendicion = new javax.swing.JButton();
        lblTotalBC = new javax.swing.JLabel();
        lblTotalBU = new javax.swing.JLabel();
        lblTotalBNP = new javax.swing.JLabel();
        lblTotalGV = new javax.swing.JLabel();
        btnLimpiarLista = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tfDiferencia = new javax.swing.JTextField();
        tfAnioRendido = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cmbLibreDeuda = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        cmbCobros = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        cmbPagos = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        cmbTramiteRendicion = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(diagAltaRendicion.class, "diagAltaRendicion.title")); // NOI18N

        jLabel1.setText(org.openide.util.NbBundle.getMessage(diagAltaRendicion.class, "diagAltaRendicion.jLabel1.text")); // NOI18N

        tfMonto.setText(org.openide.util.NbBundle.getMessage(diagAltaRendicion.class, "diagAltaRendicion.tfMonto.text")); // NOI18N
        tfMonto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfMontoFocusLost(evt);
            }
        });

        jLabel2.setText(org.openide.util.NbBundle.getMessage(diagAltaRendicion.class, "diagAltaRendicion.jLabel2.text")); // NOI18N

        dpFechaRendicion.setFormats("dd/MM/yyyy");

        jLabel3.setText(org.openide.util.NbBundle.getMessage(diagAltaRendicion.class, "diagAltaRendicion.jLabel3.text")); // NOI18N

        taObservacion.setColumns(20);
        taObservacion.setRows(5);
        jScrollPane1.setViewportView(taObservacion);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(diagAltaRendicion.class, "diagAltaRendicion.jPanel1.border.title"))); // NOI18N

        tblDetalle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblDetalle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDetalleMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblDetalle);

        btnImportar.setText(org.openide.util.NbBundle.getMessage(diagAltaRendicion.class, "diagAltaRendicion.btnImportar.text")); // NOI18N
        btnImportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportarActionPerformed(evt);
            }
        });

        btnAgregarDetalleRendicion.setText(org.openide.util.NbBundle.getMessage(diagAltaRendicion.class, "diagAltaRendicion.btnAgregarDetalleRendicion.text")); // NOI18N
        btnAgregarDetalleRendicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarDetalleRendicionActionPerformed(evt);
            }
        });

        btnEliminarDetalleRendicion.setText(org.openide.util.NbBundle.getMessage(diagAltaRendicion.class, "diagAltaRendicion.btnEliminarDetalleRendicion.text")); // NOI18N
        btnEliminarDetalleRendicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarDetalleRendicionActionPerformed(evt);
            }
        });

        lblTotalBC.setText(org.openide.util.NbBundle.getMessage(diagAltaRendicion.class, "diagAltaRendicion.lblTotalBC.text")); // NOI18N

        lblTotalBU.setText(org.openide.util.NbBundle.getMessage(diagAltaRendicion.class, "diagAltaRendicion.lblTotalBU.text")); // NOI18N

        lblTotalBNP.setText(org.openide.util.NbBundle.getMessage(diagAltaRendicion.class, "diagAltaRendicion.lblTotalBNP.text")); // NOI18N

        lblTotalGV.setText(org.openide.util.NbBundle.getMessage(diagAltaRendicion.class, "diagAltaRendicion.lblTotalGV.text")); // NOI18N

        btnLimpiarLista.setText(org.openide.util.NbBundle.getMessage(diagAltaRendicion.class, "diagAltaRendicion.btnLimpiarLista.text")); // NOI18N
        btnLimpiarLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarListaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblTotalBC)
                        .addGap(45, 45, 45)
                        .addComponent(lblTotalBNP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTotalGV)
                        .addGap(54, 54, 54)
                        .addComponent(lblTotalBU))
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnImportar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnLimpiarLista)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAgregarDetalleRendicion, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEliminarDetalleRendicion, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImportar)
                    .addComponent(btnAgregarDetalleRendicion)
                    .addComponent(btnEliminarDetalleRendicion)
                    .addComponent(btnLimpiarLista))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotalBC)
                    .addComponent(lblTotalBU)
                    .addComponent(lblTotalBNP)
                    .addComponent(lblTotalGV))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnGuardar.setText(org.openide.util.NbBundle.getMessage(diagAltaRendicion.class, "diagAltaRendicion.btnGuardar.text")); // NOI18N
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        jLabel4.setText(org.openide.util.NbBundle.getMessage(diagAltaRendicion.class, "diagAltaRendicion.jLabel4.text")); // NOI18N

        jLabel5.setText(org.openide.util.NbBundle.getMessage(diagAltaRendicion.class, "diagAltaRendicion.jLabel5.text")); // NOI18N

        tfDiferencia.setText(org.openide.util.NbBundle.getMessage(diagAltaRendicion.class, "diagAltaRendicion.tfDiferencia.text")); // NOI18N

        tfAnioRendido.setText(org.openide.util.NbBundle.getMessage(diagAltaRendicion.class, "diagAltaRendicion.tfAnioRendido.text")); // NOI18N

        jLabel6.setText(org.openide.util.NbBundle.getMessage(diagAltaRendicion.class, "diagAltaRendicion.jLabel6.text")); // NOI18N

        cmbLibreDeuda.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "NO", "SI", "EN TRAMITE" }));

        jLabel7.setText(org.openide.util.NbBundle.getMessage(diagAltaRendicion.class, "diagAltaRendicion.jLabel7.text")); // NOI18N

        jLabel8.setText(org.openide.util.NbBundle.getMessage(diagAltaRendicion.class, "diagAltaRendicion.jLabel8.text")); // NOI18N

        jLabel9.setText(org.openide.util.NbBundle.getMessage(diagAltaRendicion.class, "diagAltaRendicion.jLabel9.text")); // NOI18N

        cmbTramiteRendicion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Con Canon", "Sin Canon" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(296, 296, 296)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel8))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfAnioRendido, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(jLabel6))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dpFechaRendicion, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbLibreDeuda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(88, 88, 88)
                                .addComponent(jLabel1))
                            .addComponent(cmbCobros, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfDiferencia, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(tfMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmbPagos, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbTramiteRendicion, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tfMonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(tfAnioRendido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(cmbLibreDeuda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tfDiferencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dpFechaRendicion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel7)
                    .addComponent(cmbCobros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cmbPagos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(cmbTramiteRendicion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(11, 11, 11)
                .addComponent(btnGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportarActionPerformed
        importarDetalleRendicion();
    }//GEN-LAST:event_btnImportarActionPerformed

    private void tfMontoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfMontoFocusLost
        calcularDiferencia();
    }//GEN-LAST:event_tfMontoFocusLost

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        guardarRendicion();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnAgregarDetalleRendicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarDetalleRendicionActionPerformed
        agregarDetalleRendicion();
    }//GEN-LAST:event_btnAgregarDetalleRendicionActionPerformed

    private void tblDetalleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDetalleMouseClicked
        btnEliminarDetalleRendicion.setEnabled(true);
    }//GEN-LAST:event_tblDetalleMouseClicked

    private void btnEliminarDetalleRendicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarDetalleRendicionActionPerformed
        eliminarDetalleRendicion(tblDetalle.getSelectedRow());
    }//GEN-LAST:event_btnEliminarDetalleRendicionActionPerformed

    private void btnLimpiarListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarListaActionPerformed
        limpiarListaDetalle(listaRendicionesDetalle);        
    }//GEN-LAST:event_btnLimpiarListaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(diagAltaRendicion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(diagAltaRendicion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(diagAltaRendicion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(diagAltaRendicion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                diagAltaRendicion dialog = new diagAltaRendicion(new javax.swing.JFrame(), true, new Proyecto(), new Usuario());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarDetalleRendicion;
    private javax.swing.JButton btnEliminarDetalleRendicion;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnImportar;
    private javax.swing.JButton btnLimpiarLista;
    private javax.swing.JComboBox cmbCobros;
    private javax.swing.JComboBox cmbLibreDeuda;
    private javax.swing.JComboBox cmbPagos;
    private javax.swing.JComboBox<String> cmbTramiteRendicion;
    private org.jdesktop.swingx.JXDatePicker dpFechaRendicion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTotalBC;
    private javax.swing.JLabel lblTotalBNP;
    private javax.swing.JLabel lblTotalBU;
    private javax.swing.JLabel lblTotalGV;
    private javax.swing.JTextArea taObservacion;
    private javax.swing.JTable tblDetalle;
    private javax.swing.JTextField tfAnioRendido;
    private javax.swing.JTextField tfDiferencia;
    private javax.swing.JTextField tfMonto;
    // End of variables declaration//GEN-END:variables

    private void inicializarComponentes() {
        this.setLocationRelativeTo(null);
        cargarEncabezadoTabla();
        habilitarComponentes(false);
        cargarComboCobro();
        cargarComboPago();
        btnAgregarDetalleRendicion.setVisible(true);
        btnEliminarDetalleRendicion.setVisible(true);
        btnAgregarDetalleRendicion.setMnemonic(KeyEvent.VK_A);
        setBotonPresionado(false);
    }

    private void cargarEncabezadoTabla() {
        modeloTabla.addColumn("Tipo Bien");
        modeloTabla.addColumn("Detalle");
        modeloTabla.addColumn("Nº Acta");
        modeloTabla.addColumn("Nº Comprobante");
        modeloTabla.addColumn("Fecha");        
        modeloTabla.addColumn("Monto");        
        tblDetalle.setModel(modeloTabla);
    }

    private void cargarCuerpoTabla(List<RendicionDetalle> listaRendicionesDetalle) {
        BigDecimal totalDetalleRendicionBC = new BigDecimal("0");
        for (RendicionDetalle rd : listaRendicionesDetalle) {
            
            Object[] fila = new Object[6];
            fila[0] = rd.getTipoBien();
            fila[1] = rd.getDetalle();
            fila[2] = rd.getNumeroActaPatrimonial();            
            fila[3] = rd.getNumeroComprobante();
            if(rd.getFechaCompra() == null){
                fila[4] = rd.getFechaCompra();            
            }else{
                fila[4] = formato.format(rd.getFechaCompra());            
            }
            //fila[4] = rd.getFechaCompra();            
            fila[5] = rd.getPrecioUnitario();
            
            modeloTabla.addRow(fila);
            
            //BigDecimal totalArticuloBC = rd.getPrecioUnitario().multiply(new BigDecimal(rd.getCantidadCompra()));
            BigDecimal totalArticuloBC = rd.getPrecioUnitario();
            totalDetalleRendicionBC =  totalDetalleRendicionBC.add(totalArticuloBC);         
        }        
        tblDetalle.setModel(modeloTabla);
        
        tfMonto.setText(String.valueOf(totalDetalleRendicionBC));
       
    }
    
    private void habilitarComponentes(boolean b) {
        tfDiferencia.setEditable(b);       
        tfMonto.setEditable(b);                
        btnEliminarDetalleRendicion.setEnabled(b);       
        btnLimpiarLista.setEnabled(b);
        lblTotalBC.setVisible(b);
        lblTotalBNP.setVisible(b);
        lblTotalBU.setVisible(b);
        lblTotalGV.setVisible(b);
    }

    private void cargarComboCobro() {
        Proyecto proyecto = facade.PagoEconomicoFacade.getInstance().pagosxProyecto(proyectoSeleccionado);
        List<PagoEconomico> pagos = proyecto.getPagos();
        List<Cobro> listaCobros = new ArrayList();
        if (pagos.size() > 0) {
            for (int i = 0; i < pagos.size(); i++) {
                List<Cobro> listaCob = pagos.get(i).getCobros();
                for (Cobro cobro : listaCob) {
                    listaCobros.add(cobro);
                }
            }
            Comunes.cargarJComboConBlanco(cmbCobros, listaCobros);
        }
    }
    
    private void cargarComboPago() {
        Proyecto proyecto = facade.PagoEconomicoFacade.getInstance().pagosxProyecto(proyectoSeleccionado);
        List<PagoEconomico> pagos = proyecto.getPagos();        
        if (pagos.size() > 0) {           
            Comunes.cargarJComboConBlanco(cmbPagos, pagos);
        }
    }

    private void calcularDiferencia() {
        if (cmbCobros.getSelectedIndex() > 0) {

            cobroElegido = (Cobro) cmbCobros.getSelectedItem();
            BigDecimal diferencia = new BigDecimal(0);
            try {
                diferencia = new BigDecimal(tfMonto.getText()).subtract(cobroElegido.getMontoCobrado());

            } catch (java.lang.NumberFormatException ex) {
                tfMonto.setText("0");
                diferencia = new BigDecimal(tfMonto.getText()).subtract(cobroElegido.getMontoCobrado());
            }
            BigDecimal cero = new BigDecimal(0.0);

            if (diferencia.compareTo(cero) < 0) {
                tfDiferencia.setForeground(Color.red);
            } else {
                tfDiferencia.setForeground(Color.blue);
            }
            tfDiferencia.setText(String.valueOf(diferencia));
        }
    }

    private void guardarRendicion() {
        validarCampos();
    }

    /*
     * private void verDetalleRendicion() { diagVerDetalleRendicion verDetalle =
     * new diagVerDetalleRendicion(null, true, null, cobroElegido);
     * verDetalle.setVisible(true);
     }
     */
    private void importarDetalleRendicion() {
        limpiarListaDetalle(listaRendicionesDetalle);
        List cellDataList = new ArrayList();
        try {
            
            JFileChooser chooser = new JFileChooser();
            // Agrego la variable seleccion para guardar el resultado del chooser
            // dicha variable sera usada para guardar el arhcivo en excel
            int seleccion = chooser.showOpenDialog(chooser);
            if(seleccion == chooser.APPROVE_OPTION){   
                File selectedFile = chooser.getSelectedFile();

                FileInputStream fileInputStream = new FileInputStream(selectedFile);

                POIFSFileSystem fsFileSystem = new POIFSFileSystem(fileInputStream);

                HSSFWorkbook workBook = new HSSFWorkbook(fsFileSystem);
                //HSSFWorkbook workBook = new HSSFWorkbook(in);
                HSSFSheet hssfSheet = workBook.getSheetAt(1);

                Iterator rowIterator = hssfSheet.rowIterator();
                while (rowIterator.hasNext()) {
                    HSSFRow hssfRow = (HSSFRow) rowIterator.next();
                    Iterator iterator = hssfRow.cellIterator();
                    List cellTempList = new ArrayList();
                    while (iterator.hasNext()) {
                        HSSFCell hssfCell = (HSSFCell) iterator.next();
                        cellTempList.add(hssfCell);
                    }
                    cellDataList.add(cellTempList);
                }           
                almacenarDetalleRendicion(cellDataList);

                // Guardo el archivo de rendicion                        
                File fichero = chooser.getSelectedFile();                
                setArchivoRendicion(fichero.getAbsolutePath());
                setBotonPresionado(true);
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void almacenarDetalleRendicion(List cellDataList) {
        int tipoBien = 0;
        
        for (int i = 1; i < cellDataList.size(); i++) {
            List cellTempList = (List) cellDataList.get(i);

            // NumberFormat numberFormat = NumberFormat.getInstance();
            // trunca a 0 digitos
            // numberFormat.setMaximumFractionDigits(0);
            // le decimos al NumberFormat que el redondeado sea mediante truncamiento.
            // numberFormat.setRoundingMode(RoundingMode.DOWN);
            // String stringCellValue = numberFormat.format(Double.parseDouble(hssfCell.toString()));
            HSSFCell hssfCell = (HSSFCell) cellTempList.get(0);
            String stringCellValue = hssfCell.toString();
            //System.out.print("Detalle " + stringCellValue + "\t");            
            RendicionDetalle rendicionDetalleImportado = new RendicionDetalle();
           
            switch(stringCellValue){
                case "Bienes de Consumo:":                       
                    //rendicionDetalleImportado.setTipoBien("Bien de Consumo"); 
                    tipoBien = 1;
                    break;
                case "Sub-Total (Bienes de Consumo)":                     
                    break;
                case "Servicios No Personales:": 
                    //rendicionDetalleImportado.setTipoBien("Bien No Personal"); 
                    tipoBien = 2;
                    break;
                case "Sub-Total (Servicios No Personales)":                    
                    break;               
                case "Gastos de Viaje:": 
                    //rendicionDetalleImportado.setTipoBien("Gastos de Viaje"); 
                    tipoBien = 3;
                    break;
                case "Sub-Total (Gastos de Viaje)":                     
                    break;
                case "Bienes de Capital:": 
                    //rendicionDetalleImportado.setTipoBien("Bien de Uso"); 
                    tipoBien = 4;
                    break;
                case "Sub-Total (Bienes de Capital)":                     
                    break;   
                case "Monto Total Ejecutado":                     
                    break;  
                case "Formulario C":                     
                    break; 
                case "UNIVERSIDAD NACIONAL DE CATAMARCA":                     
                    break;  
                case "SECRETARIA DE CIENCIA Y TECNOLOGÍA":                     
                    break;  
                case "CONSEJO DE INVESTIGACIÓN":                     
                    break;  
                case "DETALLE DE LA RELACIÓN DE COMPROBANTES":                     
                    break;  
                case "Rubro o Cuenta":                      
                    break;  
                case "TRANSPORTE":                      
                    break; 
                case "":                       
                    break;  
                default:
                            
            /*}                  
            
            if(stringCellValue.equals("Bienes de Consumo:") || 
                    stringCellValue.equals("Sub-Total (Bienes de Consumo)") ||
                    stringCellValue.equals("Servicios No Personales:") ||
                    stringCellValue.equals("Sub-Total (Servicios No Personales)") ||
                    stringCellValue.equals("Gastos de Viaje:") ||
                    stringCellValue.equals("Sub-Total (Gastos de Viaje)") ||
                    stringCellValue.equals("Bienes de Capital:") ||
                    stringCellValue.equals("Sub-Total (Bienes de Capital)") ||
                    stringCellValue.equals("Monto Total Ejecutado") || 
                    stringCellValue.equals("Formulario C") ||                    
                    stringCellValue.equals("")){
                continue;
            }else{*/
                hssfCell = (HSSFCell) cellTempList.get(4);
                BigDecimal intCellValue = new BigDecimal(hssfCell.getNumericCellValue()).
                setScale(2, RoundingMode.HALF_UP);                                    
                //System.out.print("Importe " + intCellValue + "\t");
                //System.out.println();
                rendicionDetalleImportado.setPrecioUnitario(intCellValue);
                //5
                if(tipoBien == 1){
                    rendicionDetalleImportado.setTipoBien("Bien de Consumo");                  
                }else{
                    if(tipoBien == 2){
                        rendicionDetalleImportado.setTipoBien("Servicio No Personal");                        
                    }else{
                        if(tipoBien == 3){
                            rendicionDetalleImportado.setTipoBien("Gastos de Viaje");                           
                        }else{
                            if(tipoBien == 4){
                                rendicionDetalleImportado.setTipoBien("Bien de Capital");                                
                            }
                        }
                    }
                }
                rendicionDetalleImportado.setDetalle(stringCellValue);
                //1        
                hssfCell = (HSSFCell) cellTempList.get(1);
                stringCellValue = hssfCell.toString();            
                //System.out.print("Número Orden " + stringCellValue + "\t");
                rendicionDetalleImportado.setNumeroActaPatrimonial(stringCellValue);
                //2                        
                hssfCell = (HSSFCell) cellTempList.get(2);
                stringCellValue = hssfCell.toString();
                //System.out.print("Número de Comprobante " + stringCellValue + "\t");
                rendicionDetalleImportado.setNumeroComprobante(stringCellValue);            
                //3
                //System.out.print("vuelta " + i + "\t");
                hssfCell = (HSSFCell) cellTempList.get(3);
                Date dateCellValue = hssfCell.getDateCellValue();
                //System.out.print("Fecha Compra " + dateCellValue + "\t");           
                rendicionDetalleImportado.setFechaCompra(dateCellValue);
                //4
                //hssfCell = (HSSFCell) cellTempList.get(4);
                //BigDecimal intCellValue1 = new BigDecimal(hssfCell.getNumericCellValue()).setScale(2, RoundingMode.HALF_UP);                                    
                //System.out.print("Importe " + intCellValue1 + "\t");
                //System.out.println();
                //rendicionDetalleImportado.setPrecioUnitario(intCellValue);
                //5
               
                listaRendicionesDetalle.add(rendicionDetalleImportado);
            }
        }

        limpiarTablaDetalle();
        cargarCuerpoTabla(listaRendicionesDetalle);
        calcularTotalesRendicion(listaRendicionesDetalle);
        calcularDiferencia();
        if (cellDataList.size() > 0) {
            rendicion.setRendicionDetalle(listaRendicionesDetalle);
            btnLimpiarLista.setEnabled(true);
        }        
        JOptionPane.showMessageDialog(null, "Importación Realizada con Exito");
    }

    private void limpiarTablaDetalle() {        
        DefaultTableModel modeloTablaLimpia = (DefaultTableModel) tblDetalle.getModel();
        modeloTablaLimpia.getDataVector().clear(); //limpias el contenido
        tblDetalle.setModel(modeloTablaLimpia);//asignas el nuevo modelo de la tabla
        tblDetalle.updateUI();//actualizas la tabla
    }

    private void validarCampos() {
        boolean bandera = true;
        String error = "Error: \n";

        /*if (tfMonto.getText().isEmpty()) {
            bandera = false;
            error += "Debe ingresar un Monto \n";
        }

        if (dpFechaRendicion.getDate() == null) {
            bandera = false;
            error += "Debe ingresar una Fecha de Rendición \n";
        }*/

        if (bandera == false) {
            JOptionPane.showMessageDialog(null, error);
        } else {
            guardarRegistro();
        }
    }

    private void guardarRegistro() {   
        PagoEconomico pagoSeleccionado = (PagoEconomico) cmbPagos.getSelectedItem();
        rendicion.setFechaRendicion(dpFechaRendicion.getDate());
        if(Comunes.validarBigDecimal(tfMonto.getText())){
            rendicion.setMontoRendido(new BigDecimal(tfMonto.getText()));
        }else{
            rendicion.setMontoRendido(new BigDecimal("0"));
        }
        rendicion.setAnioRendido(Integer.parseInt(tfAnioRendido.getText()));
        rendicion.setLibreDeuda(cmbLibreDeuda.getSelectedItem().toString());
        rendicion.setObservacion(taObservacion.getText());
        rendicion.setPagoEconomico(pagoSeleccionado);
        rendicion.setTramiteRendicion(cmbTramiteRendicion.getSelectedItem().toString());

        // Averiguo si la rendicón tiene detalle
        if (listaRendicionesDetalle.size() > 0) {
            if(isBotonPresionado()){
                rendicion.setArchivoRendicion(guardarArchivoAdjunto(getArchivoRendicion()));
            }            
            rendicion.setRendicionDetalle(listaRendicionesDetalle);
            /*RendicionDetalle rendicionDetalle = new RendicionDetalle();
            for (RendicionDetalle rd : listaRendicionesDetalle) {
                rendicionDetalle.setNumeroActaPatrimonial(rd.getNumeroActaPatrimonial());
                rendicionDetalle.setCantidadCompra(rd.getCantidadCompra());
                rendicionDetalle.setPrecioUnitario(rd.getPrecioUnitario());
                rendicionDetalle.setFechaCompra(rd.getFechaCompra());
                rendicionDetalle.setDetalle(rd.getDetalle());
                rendicionDetalle.setNumeroComprobante(rd.getNumeroComprobante());
                rendicionDetalle.setTipoBien(rd.getTipoBien());
                facade.RendicionDetalleFacade.getInstance().altaRendicionDetalle(rendicionDetalle);*/

                /*Operacion operacion = new Operacion();
                operacion.setFecha(Comunes.obtenerFechaActualDesdeDB());
                operacion.setOperacion("Alta de Rendicion Detalle (Economico)");
                operacion.setUsuario(usuario);
                OperacionFacade.getInstance().alta(operacion);*/
            //}
        }            

        facade.RendicionFacade.getInstance().altaRendicion(rendicion);           

        Operacion operacion = new Operacion();
        operacion.setFecha(Comunes.obtenerFechaActualDesdeDB());
        operacion.setOperacion("Alta de Rendición (Economico)");
        operacion.setUsuario(usuario);
        OperacionFacade.getInstance().alta(operacion);

        JOptionPane.showMessageDialog(null, "Datos Guardados");
        this.dispose();
        
    }

    private void agregarDetalleRendicion() {
        diagAltaRendicionDetalle altaRendicionDetalle = new diagAltaRendicionDetalle(null, true);
        altaRendicionDetalle.setVisible(true);
       
        List<RendicionDetalle> listaRendicionDetalle = altaRendicionDetalle.getListaRendicionDetalle();
        if (!listaRendicionDetalle.isEmpty()) {            
            limpiarTablaDetalle(); 
            for(RendicionDetalle rd: listaRendicionDetalle){
                listaRendicionesDetalle.add(rd);
            }
            Collections.sort(listaRendicionesDetalle);
            cargarCuerpoTabla(listaRendicionesDetalle);
            calcularTotalesRendicion(listaRendicionesDetalle);
            calcularDiferencia();
        } else {
            JOptionPane.showMessageDialog(null, "No ha cargado un Detalle de Rendicion");
        }
    }

    private void eliminarDetalleRendicion(int fila) {
        listaRendicionesDetalle.remove(fila);
        modeloTabla.removeRow(tblDetalle.getSelectedRow());
        limpiarTablaDetalle(); 
        Collections.sort(listaRendicionesDetalle);
        cargarCuerpoTabla(listaRendicionesDetalle);
        calcularTotalesRendicion(listaRendicionesDetalle);
        calcularDiferencia();
        JOptionPane.showMessageDialog(null, "Renglón eliminado con Exito");
    }

    private void calcularTotalesRendicion(List<RendicionDetalle> listaRendicion) {
        BigDecimal totalBC = new BigDecimal("0");
        BigDecimal totalBNP = new BigDecimal("0");
        BigDecimal totalGV = new BigDecimal("0");
        BigDecimal totalBU = new BigDecimal("0");
        for(RendicionDetalle rd: listaRendicion){
            if(rd.getTipoBien().equals("Bien de Consumo")){
                totalBC = totalBC.add(rd.getPrecioUnitario());
            }
            if(rd.getTipoBien().equals("Servicio No Personal")){
                totalBNP = totalBNP.add(rd.getPrecioUnitario());
            }
            if(rd.getTipoBien().equals("Gastos de Viaje")){
                totalGV = totalGV.add(rd.getPrecioUnitario());
            }
            if(rd.getTipoBien().equals("Bien de Capital")){
                totalBU = totalBU.add(rd.getPrecioUnitario());
            }            
        }
        lblTotalBC.setText("Bien Consumo $ " + totalBC);
        lblTotalBNP.setText("Serv. No Pers. $ " + totalBNP);
        lblTotalBU.setText("Bien Capital $ " + totalBU);
        lblTotalGV.setText("Gastos Viaje $ " + totalGV);
        lblTotalBC.setVisible(true);
        lblTotalBNP.setVisible(true);
        lblTotalBU.setVisible(true);
        lblTotalGV.setVisible(true);
    }

    private void limpiarListaDetalle(List<RendicionDetalle> listaRendicion) {
        listaRendicion.clear();
        calcularTotalesRendicion(listaRendicionesDetalle);
        limpiarTablaDetalle();
        Collections.sort(listaRendicionesDetalle);
        cargarCuerpoTabla(listaRendicion);               
        calcularDiferencia();        
    }

    private Documento guardarArchivoAdjunto(String archivoElegido) {
       try {              
            File archivoEntrada = new File(archivoElegido);
            Documento d = new Documento();
            d.setNombreArchivo(archivoEntrada.getName());
            InputStream is = new FileInputStream(archivoEntrada); //lo abrimos. Lo importante es que sea un InputStream
            byte[] buffer = new byte[(int) archivoEntrada.length()]; //creamos el buffer
            is.read(buffer); //leemos el archivo al buffer
            d.setContenidoArchivo(buffer);
            new DocumentoJpaController(Persistence.createEntityManagerFactory("ProyectoUnoPU",ConexionFacade.PROPIEDADES)).create(d);             
            //rendicion.setArchivoRendicion(d);                
            return d;
        } catch (Exception ex) {
            Logger.getLogger(diagAltaRendicion.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }       
    }
    
}
