/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.EntradasSalidas;

import controladores.DocumentoJpaController;
import entidades.Documento;
import entidades.EntradasSalidas.Areas;
import entidades.EntradasSalidas.Correspondencia;
import entidades.EntradasSalidas.Expediente;
import entidades.EntradasSalidas.NotaEntradaSalida;
import entidades.EntradasSalidas.OtrosEmisoresReceptores;
import entidades.EntradasSalidas.Pase;
import entidades.Resolucion;
import entidades.persona.investigador.Investigador;
import entidades.usuario.Usuario;
import facade.ConexionFacade;
import facade.EntradasSalidas.OtrosEmisoresReceptoresFacade;
import facade.PaseFacade;
import includes.Comunes;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author vouilloz
 */
public class diagNuevaEntradaSalida extends javax.swing.JDialog {

    private Usuario user;
    private Expediente expe;
    private NotaEntradaSalida nota;
    private Resolucion resolucion;

    private Investigador investigador;
    private Areas area;
    private OtrosEmisoresReceptores otro;

    private Pase pase;

    public static boolean entradaSalida;

    private Correspondencia cor;

    public static String operacion;
    
    private boolean bCargaArchivo = false;

    public static String getOperacion() {
        return operacion;
    }

    public static Long idPase;

    public static void setOperacion(String operacion) {
        diagNuevaEntradaSalida.operacion = operacion;
    }
    private String otroEmisorString;
    private String otroDestinoString;

    /*   diagNuevaEntradaSalida(Object object, boolean b, Usuario user, Long id) {
     idPase = id;
     inicializarModificacion();
     }*/
    public Correspondencia getCor() {
        return cor;
    }

    public void setCor(Correspondencia cor) {
        this.cor = cor;
    }

    /**
     * Creates new form diagNuevaEntrada
     */
    public diagNuevaEntradaSalida(java.awt.Frame parent, boolean modal, Usuario usuario) {
        super(parent, modal);
        initComponents();
        user = usuario;
        if (idPase == null) {
            inicializar();
        } else {
            inicializarModificacion();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cbTramite = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taMotivo = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        lbReceptor = new javax.swing.JLabel();
        lbDocumento = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        pnEmisor = new javax.swing.JPanel();
        btnBuscarEmisor = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        dpFechaEmision = new org.jdesktop.swingx.JXDatePicker();
        cbInvestigadorAre = new javax.swing.JComboBox();
        tfOtroEmisor = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        lbl1 = new javax.swing.JLabel();
        pnDestino = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        btnBuscarDestinatario = new javax.swing.JButton();
        cbInvestigadorAre1 = new javax.swing.JComboBox();
        dpFechaPase = new org.jdesktop.swingx.JXDatePicker();
        jLabel8 = new javax.swing.JLabel();
        tfOtroDestino = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        lbl2 = new javax.swing.JLabel();
        dpFechaRegistro = new org.jdesktop.swingx.JXDatePicker();
        jLabel6 = new javax.swing.JLabel();
        pnAgregarArchivo = new javax.swing.JPanel();
        btnCargarExp = new javax.swing.JButton();
        tfRutaCargaExp = new javax.swing.JTextField();
        tfDocumento = new javax.swing.JLabel();
        lbDocumento1 = new javax.swing.JLabel();
        tfNum_foja = new javax.swing.JTextField();
        jbNuevo_tramite = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.title")); // NOI18N
        setPreferredSize(new java.awt.Dimension(991, 799));

        jLabel1.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.jLabel1.text")); // NOI18N

        cbTramite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTramiteActionPerformed(evt);
            }
        });

        jLabel3.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.jLabel3.text")); // NOI18N

        taMotivo.setColumns(20);
        taMotivo.setRows(5);
        jScrollPane1.setViewportView(taMotivo);

        jButton2.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        lbReceptor.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        lbReceptor.setForeground(java.awt.Color.red);
        lbReceptor.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.lbReceptor.text")); // NOI18N

        lbDocumento.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.lbDocumento.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.jLabel2.text")); // NOI18N

        pnEmisor.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.pnEmisor.border.title"))); // NOI18N

        btnBuscarEmisor.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.btnBuscarEmisor.text")); // NOI18N
        btnBuscarEmisor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarEmisorActionPerformed(evt);
            }
        });

        jLabel4.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.jLabel4.text")); // NOI18N

        dpFechaEmision.setFormats("dd/MM/yyyy");

        cbInvestigadorAre.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Investigador", "Area", "Otros", " " }));
        cbInvestigadorAre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbInvestigadorAreMouseClicked(evt);
            }
        });
        cbInvestigadorAre.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbInvestigadorAreItemStateChanged(evt);
            }
        });

        tfOtroEmisor.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.tfOtroEmisor.text")); // NOI18N

        jLabel7.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.jLabel7.text")); // NOI18N

        lbl1.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.lbl1.text")); // NOI18N

        javax.swing.GroupLayout pnEmisorLayout = new javax.swing.GroupLayout(pnEmisor);
        pnEmisor.setLayout(pnEmisorLayout);
        pnEmisorLayout.setHorizontalGroup(
            pnEmisorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnEmisorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnEmisorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnEmisorLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dpFechaEmision, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cbInvestigadorAre, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(pnEmisorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnEmisorLayout.createSequentialGroup()
                        .addGroup(pnEmisorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBuscarEmisor, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addComponent(lbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tfOtroEmisor, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(526, Short.MAX_VALUE))
        );
        pnEmisorLayout.setVerticalGroup(
            pnEmisorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnEmisorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnEmisorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBuscarEmisor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbInvestigadorAre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnEmisorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnEmisorLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfOtroEmisor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))
                    .addGroup(pnEmisorLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(pnEmisorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dpFechaEmision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pnDestino.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.pnDestino.border.title"))); // NOI18N

        jLabel5.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.jLabel5.text")); // NOI18N

        btnBuscarDestinatario.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.btnBuscarDestinatario.text")); // NOI18N
        btnBuscarDestinatario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarDestinatarioActionPerformed(evt);
            }
        });

        cbInvestigadorAre1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Investigador", "Area", "Otros", " " }));
        cbInvestigadorAre1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbInvestigadorAre1ItemStateChanged(evt);
            }
        });

        dpFechaPase.setFormats("dd/MM/yyyy");

        jLabel8.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.jLabel8.text")); // NOI18N

        tfOtroDestino.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.tfOtroDestino.text")); // NOI18N

        jLabel9.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.jLabel9.text")); // NOI18N

        lbl2.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.lbl2.text")); // NOI18N

        javax.swing.GroupLayout pnDestinoLayout = new javax.swing.GroupLayout(pnDestino);
        pnDestino.setLayout(pnDestinoLayout);
        pnDestinoLayout.setHorizontalGroup(
            pnDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDestinoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnDestinoLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(cbInvestigadorAre1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnDestinoLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dpFechaPase, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnDestinoLayout.createSequentialGroup()
                        .addComponent(btnBuscarDestinatario, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbl2, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel9)
                    .addComponent(tfOtroDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnDestinoLayout.setVerticalGroup(
            pnDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDestinoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnBuscarDestinatario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbInvestigadorAre1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5))
                    .addComponent(lbl2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnDestinoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfOtroDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dpFechaPase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        dpFechaRegistro.setFormats("dd/MM/yyyy");

        jLabel6.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.jLabel6.text")); // NOI18N

        pnAgregarArchivo.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.pnAgregarArchivo.border.title"))); // NOI18N

        btnCargarExp.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.btnCargarExp.text")); // NOI18N
        btnCargarExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarExpActionPerformed(evt);
            }
        });

        tfRutaCargaExp.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.tfRutaCargaExp.text")); // NOI18N

        javax.swing.GroupLayout pnAgregarArchivoLayout = new javax.swing.GroupLayout(pnAgregarArchivo);
        pnAgregarArchivo.setLayout(pnAgregarArchivoLayout);
        pnAgregarArchivoLayout.setHorizontalGroup(
            pnAgregarArchivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnAgregarArchivoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCargarExp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfRutaCargaExp, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnAgregarArchivoLayout.setVerticalGroup(
            pnAgregarArchivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnAgregarArchivoLayout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(pnAgregarArchivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCargarExp, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfRutaCargaExp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        tfDocumento.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        tfDocumento.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.tfDocumento.text")); // NOI18N
        tfDocumento.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        lbDocumento1.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.lbDocumento1.text")); // NOI18N

        tfNum_foja.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.tfNum_foja.text")); // NOI18N

        jbNuevo_tramite.setText(org.openide.util.NbBundle.getMessage(diagNuevaEntradaSalida.class, "diagNuevaEntradaSalida.jbNuevo_tramite.text")); // NOI18N
        jbNuevo_tramite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNuevo_tramiteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(lbDocumento1)
                    .addComponent(lbDocumento))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfNum_foja, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbTramite, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21)
                                .addComponent(jbNuevo_tramite, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lbReceptor, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnAgregarArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 561, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pnDestino, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnEmisor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dpFechaRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(81, 81, 81)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(263, 263, 263)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbReceptor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbTramite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jbNuevo_tramite))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbDocumento1)
                            .addComponent(tfNum_foja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(pnAgregarArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tfDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbDocumento))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(dpFechaRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addComponent(pnEmisor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbTramiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTramiteActionPerformed
    /*    if (cbTramite.getSelectedIndex() != -1) {
            if (cbTramite.getSelectedItem().equals("Resolucion")) {
                tfDocumento.setEnabled(true);
                tfDocumento.setText("");
                lbDocumento.setText("Resolucion");
                btnCargarDatos.setEnabled(true);

            }
            if (cbTramite.getSelectedItem().equals("Expediente")) {
                btnCargarDatos.setEnabled(true);
                tfDocumento.setText("");
                lbDocumento.setText("Expediente");
            }
            if (cbTramite.getSelectedItem().equals("Nota")) {
                btnCargarDatos.setEnabled(true);
                tfDocumento.setText("");
                lbDocumento.setText("Nota");
            }
            if (cbTramite.getSelectedItem().equals("Correspondencia")) {
                btnCargarDatos.setEnabled(true);
                tfDocumento.setText("");
                lbDocumento.setText("Correspondencia Emisor");
            }

        }*/
    if (cbTramite.getSelectedIndex() != -1) {
            if ((cbTramite.getSelectedItem().equals("Expediente")) && (entradaSalida == false) &&(idPase == null)) {
                //Comunes.activarComponentesPanel(pnAgregarArchivo);
                btnCargarExp.setEnabled(true);
            } else {
                Comunes.desactivarComponentesPanel(pnAgregarArchivo);
            }
    }    
    }//GEN-LAST:event_cbTramiteActionPerformed

    private void btnBuscarEmisorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarEmisorActionPerformed
        if (cbInvestigadorAre.getSelectedIndex() != -1) {
            if (cbInvestigadorAre.getSelectedItem().equals("Investigador")) {
                diagInvestigadorBusqueda dlgIB = new diagInvestigadorBusqueda(null, true);
                Comunes.centrarDialog(dlgIB);
                dlgIB.setVisible(true);
                if (dlgIB.getInvestigador() != null) {
                    investigador = dlgIB.getInvestigador();
                    lbl1.setText(investigador.getPersona().getCuil() + " - " + investigador.getPersona().getApellido() + " - " + investigador.getPersona().getNombre());
                }

            }
            if (cbInvestigadorAre.getSelectedItem().equals("Area")) {
                diagBusquedaArea dlgBA = new diagBusquedaArea(null, true);
                Comunes.centrarDialog(dlgBA);
                dlgBA.setVisible(true);
                if (dlgBA.getArea() != null) {
                    area = dlgBA.getArea();
                    lbl1.setText(area.toString());
                }
            }
        }
    }//GEN-LAST:event_btnBuscarEmisorActionPerformed

    private void btnBuscarDestinatarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarDestinatarioActionPerformed
        if (cbInvestigadorAre1.getSelectedIndex() != -1) {
            if (cbInvestigadorAre1.getSelectedItem().equals("Investigador")) {
                diagInvestigadorBusqueda dlgIB = new diagInvestigadorBusqueda(null, true);
                Comunes.centrarDialog(dlgIB);
                dlgIB.setVisible(true);
                if (dlgIB.getInvestigador() != null) {
                    investigador = dlgIB.getInvestigador();
                    lbl2.setText(investigador.getPersona().getCuil() + " - " + investigador.getPersona().getApellido() + " - " + investigador.getPersona().getNombre());
                }

            }
            if (cbInvestigadorAre1.getSelectedItem().equals("Area")) {
                diagBusquedaArea dlgBA = new diagBusquedaArea(null, true);
                Comunes.centrarDialog(dlgBA);
                dlgBA.setVisible(true);
                if (dlgBA.getArea() != null) {
                    area = dlgBA.getArea();
                    lbl2.setText(area.toString());
                }
            }
        }
    }//GEN-LAST:event_btnBuscarDestinatarioActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        registrarEntrada();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void cbInvestigadorAreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbInvestigadorAreMouseClicked
        if (cbInvestigadorAre.getSelectedItem().equals("Otros")) {
            tfOtroEmisor.setEnabled(true);
        }
    }//GEN-LAST:event_cbInvestigadorAreMouseClicked

    private void cbInvestigadorAreItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbInvestigadorAreItemStateChanged
        
 
        if (cbInvestigadorAre.getSelectedItem().equals("Investigador")) {
            tfOtroEmisor.setEnabled(false);
            btnBuscarEmisor.setEnabled(true);
        }
        if (cbInvestigadorAre.getSelectedItem().equals("Area")) {
            tfOtroEmisor.setEnabled(false);
            btnBuscarEmisor.setEnabled(true);
        }
        if (cbInvestigadorAre.getSelectedItem().equals("Otros")) {
            tfOtroEmisor.setEnabled(true);
            lbl1.setText("");
            btnBuscarEmisor.setEnabled(false);
           
        }

    }//GEN-LAST:event_cbInvestigadorAreItemStateChanged

    private void cbInvestigadorAre1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbInvestigadorAre1ItemStateChanged
       
       
        if (cbInvestigadorAre1.getSelectedItem().equals("Investigador")) {
            tfOtroDestino.setEnabled(false);
            btnBuscarDestinatario.setEnabled(true);
        }
        if (cbInvestigadorAre1.getSelectedItem().equals("Area")) {
            tfOtroDestino.setEnabled(false);
            btnBuscarDestinatario.setEnabled(true);
        }
        if (cbInvestigadorAre1.getSelectedItem().equals("Otros")) {
            tfOtroDestino.setEnabled(true);
            lbl2.setText("");
            btnBuscarDestinatario.setEnabled(false);
           
        }
    }//GEN-LAST:event_cbInvestigadorAre1ItemStateChanged

    private void jbNuevo_tramiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNuevo_tramiteActionPerformed
        nuevo_buscar_tramite();
    }//GEN-LAST:event_jbNuevo_tramiteActionPerformed

    private void btnCargarExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarExpActionPerformed
        seleccionarExpediente();
    }//GEN-LAST:event_btnCargarExpActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(diagNuevaEntradaSalida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(diagNuevaEntradaSalida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(diagNuevaEntradaSalida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(diagNuevaEntradaSalida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                diagNuevaEntradaSalida dialog = new diagNuevaEntradaSalida(new javax.swing.JFrame(), true, new Usuario());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarDestinatario;
    private javax.swing.JButton btnBuscarEmisor;
    private javax.swing.JButton btnCargarExp;
    private javax.swing.JComboBox cbInvestigadorAre;
    private javax.swing.JComboBox cbInvestigadorAre1;
    private javax.swing.JComboBox cbTramite;
    private org.jdesktop.swingx.JXDatePicker dpFechaEmision;
    private org.jdesktop.swingx.JXDatePicker dpFechaPase;
    private org.jdesktop.swingx.JXDatePicker dpFechaRegistro;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbNuevo_tramite;
    private javax.swing.JLabel lbDocumento;
    private javax.swing.JLabel lbDocumento1;
    private javax.swing.JLabel lbReceptor;
    private javax.swing.JLabel lbl1;
    private javax.swing.JLabel lbl2;
    private javax.swing.JPanel pnAgregarArchivo;
    private javax.swing.JPanel pnDestino;
    private javax.swing.JPanel pnEmisor;
    private javax.swing.JTextArea taMotivo;
    private javax.swing.JLabel tfDocumento;
    private javax.swing.JTextField tfNum_foja;
    private javax.swing.JTextField tfOtroDestino;
    private javax.swing.JTextField tfOtroEmisor;
    private javax.swing.JTextField tfRutaCargaExp;
    // End of variables declaration//GEN-END:variables

    private void inicializar() {
        inicializarComboTramite();
        lbReceptor.setText(user.getNombreUsuario());
//        btnCargarDatos.setEnabled(true);
        //tfDocumento.setEditable(false);
        tfDocumento.setEnabled(false);
        Comunes.desactivarComponentesPanel(pnAgregarArchivo);
        if (entradaSalida) {
            Comunes.activarComponentesPanel(pnEmisor);
            Comunes.desactivarComponentesPanel(pnDestino);
           // Comunes.desactivarComponentesPanel(pnAgregarArchivo);
            jbNuevo_tramite.setText("Nuevo");

        } else {
            Comunes.activarComponentesPanel(pnDestino);
            Comunes.desactivarComponentesPanel(pnEmisor);
          //  Comunes.activarComponentesPanel(pnAgregarArchivo);
          //  tfNum_foja.setEnabled(false);
            jbNuevo_tramite.setText("Buscar");
        }

    }

    private void cargarExpediente() {
        tfDocumento.setEnabled(true);
        tfDocumento.setText(expe.getLetra() + " " + expe.getNumero() + " " + expe.getAnio() + " " + expe.getExtracto());
    }

    private void cargarNota() {
        tfDocumento.setEnabled(true);
        tfDocumento.setText(nota.toString());
    }

    private void cargarCorrespondencia() {
        tfDocumento.setEnabled(true);
        tfDocumento.setText(cor.toString());
    }

    private void registrarEntrada() {
        if (entradaSalida) {  //Por el true si es entrada
            if (operacion.equals("alta")) {
                altaEntada();
            }
            if (operacion.equals("edit")) {
                modificacionEntrada();
            }
        } else {   //Por el else si es una salida
            if (operacion.equals("alta")) {
                altaSalida();
            }
            if (operacion.equals("edit")) {
                modificacionSalida();
            }
        }

    }

    private void altaEntada() {
        if (tfDocumento.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un documento 'Nota/Expediente/Resolucion'");
            cbTramite.grabFocus();
        } else if (lbl1.getText().isEmpty() && tfOtroEmisor.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe Seleccionar un Investigador o Area de Origen, Si selecciona otros debe tipear la descripcion");
            cbInvestigadorAre.grabFocus();
        } else if (taMotivo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe Escribir el motivo del pase");
            taMotivo.grabFocus();
        } else if (tfNum_foja.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe escribir el número de fojas");
            cbTramite.grabFocus();
        } else {
            EntityManagerFactory emf = null;
            EntityManager em = null;
            try {

                emf = Persistence.createEntityManagerFactory("ProyectoUnoPU", ConexionFacade.PROPIEDADES);
                em = emf.createEntityManager();
                em.getTransaction().begin();
                pase = new Pase();
                pase.setReceptor(user);
                if (cbTramite.getSelectedItem().equals("Nota") && !tfDocumento.getText().isEmpty()) {
                    pase.setNota(nota);
                }
                if (cbTramite.getSelectedItem().equals("Expediente") && !tfDocumento.getText().isEmpty()) {
                    pase.setExpediente(expe);
                }
                if (cbTramite.getSelectedItem().equals("Resolucion") && !tfDocumento.getText().isEmpty()) {
                    pase.setResolucion(resolucion);
                }
                //cambios le seteamos el archivo de la nota al pase
                //if (cbTramite.getSelectedItem().equals("Nota") && !tfDocumento.getText().isEmpty()) {
                //    pase.setResolucion(resolucion);
                //}
                if (cbTramite.getSelectedItem().equals("Correspondencia") && !tfDocumento.getText().isEmpty()) {
                    pase.setCorrespondencia(cor);
                }

                if (cbInvestigadorAre.getSelectedItem().equals("Investigador") && !lbl1.getText().isEmpty()) {
                    pase.setInvestigadorEmisor(investigador);
                }
                if (cbInvestigadorAre.getSelectedItem().equals("Area") && !lbl1.getText().isEmpty()) {
                    pase.setAreaEmisor(area);
                }
                if (cbInvestigadorAre.getSelectedItem().equals("Otros") && !tfOtroEmisor.getText().isEmpty()) {
                    otro = new OtrosEmisoresReceptores();
                    otro.setDescripcion(tfOtroEmisor.getText());
                    OtrosEmisoresReceptoresFacade.getInstance().alta(otro);
                    pase.setOtroEmisor(otro);
                }

                pase.setFechaRegistro(dpFechaRegistro.getDate());
                pase.setFechaRecepcion(dpFechaEmision.getDate());
                //pase.setFechaDestino(dpFechaPase.getDate());
                pase.setNum_fojas(Integer.parseInt(tfNum_foja.getText()));
                pase.setMovimiento("entrada");
                pase.setMotivo(taMotivo.getText());
                pase.setTramite((String) cbTramite.getSelectedItem());
                pase.setBorrado(false);
                em.persist(pase);
                em.getTransaction().commit();
                this.dispose();
                JOptionPane.showMessageDialog(null, "Transaccion Completa", "Registro de Entrada", JOptionPane.INFORMATION_MESSAGE);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error tratando de registrar" + e, "Registro Entrada", JOptionPane.INFORMATION_MESSAGE);
                e.printStackTrace();
                em.getTransaction().rollback();
            } finally {
                em.close();
                emf.close();
            }

        }
    }

    private void altaSalida() {
        if (tfDocumento.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un documento 'Nota/Expediente/Resolucion'");
            cbTramite.grabFocus();
        } else if (lbl2.getText().isEmpty() && tfOtroDestino.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe Seleccionar un Investigador o Area de Destino, Si selecciona otros debe tipear la descripcion");
            cbInvestigadorAre1.grabFocus();
        } else if (taMotivo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe Escribir el motivo del pase");
            taMotivo.grabFocus();
        } else {
            EntityManagerFactory emf = null;
            EntityManager em = null;
            try {

                emf = Persistence.createEntityManagerFactory("ProyectoUnoPU", ConexionFacade.PROPIEDADES);
                em = emf.createEntityManager();
                em.getTransaction().begin();
                pase = new Pase();
                pase.setReceptor(user);
                if (cbTramite.getSelectedItem().equals("Nota") && !tfDocumento.getText().isEmpty()) {
                    pase.setNota(nota);
                }
                if (cbTramite.getSelectedItem().equals("Expediente") && !tfDocumento.getText().isEmpty()) {
                    pase.setExpediente(expe);
                }
                if (cbTramite.getSelectedItem().equals("Resolucion") && !tfDocumento.getText().isEmpty()) {
                    pase.setResolucion(resolucion);
                }
                //cambios le seteamos el archivo de la nota al pase
                if (cbTramite.getSelectedItem().equals("Nota") && !tfDocumento.getText().isEmpty()) {
                    pase.setResolucion(resolucion);
                }
                if (cbTramite.getSelectedItem().equals("Correspondencia") && !tfDocumento.getText().isEmpty()) {
                    pase.setCorrespondencia(cor);
                }
                if (cbInvestigadorAre1.getSelectedItem().equals("Investigador") && !lbl2.getText().isEmpty()) {
                    pase.setInvestigadorDestino(investigador);
                }
                if (cbInvestigadorAre1.getSelectedItem().equals("Area") && !lbl2.getText().isEmpty()) {
                    pase.setAreaDestino(area);
                }
                if (cbInvestigadorAre1.getSelectedItem().equals("Otros") && !tfOtroDestino.getText().isEmpty()) {
                    otro = new OtrosEmisoresReceptores();
                    otro.setDescripcion(tfOtroDestino.getText());
                    OtrosEmisoresReceptoresFacade.getInstance().alta(otro);
                    pase.setOtroDestino(otro);
                }
                
                if(bCargaArchivo){
                    File archivoEntrada = new File(tfRutaCargaExp.getText());
                    if (longitudArchivoValida(archivoEntrada)) {
                        InputStream is = null;

                        Documento d = new Documento();

                        if (!tfRutaCargaExp.getText().isEmpty()) {
                            d.setNombreArchivo(archivoEntrada.getName());
                            is = new FileInputStream(archivoEntrada);
                            byte[] buffer = new byte[(int) archivoEntrada.length()]; //creamos el buffer
                            is.read(buffer); //leemos el archivo al buffer
                            d.setContenidoArchivo(buffer);
                            new DocumentoJpaController(Persistence.createEntityManagerFactory("ProyectoUnoPU", ConexionFacade.PROPIEDADES)).create(d);
                        }
                        emf = Persistence.createEntityManagerFactory("ProyectoUnoPU", ConexionFacade.PROPIEDADES);
                        em = emf.createEntityManager();
                        em.getTransaction().begin();
                        pase.setFechaRegistro(dpFechaRegistro.getDate());
                        pase.setFechaDestino(dpFechaPase.getDate());
                        pase.setMovimiento("salida");
                        pase.setMotivo(taMotivo.getText());
                        pase.setTramite((String) cbTramite.getSelectedItem());
                        pase.setBorrado(false);
                        pase.setNum_fojas(Integer.parseInt(tfNum_foja.getText()));
                        if (!d.getNombreArchivo().isEmpty()) {
                            pase.setDocumento(d);
                        }

                        em.persist(pase);
                        em.getTransaction().commit();//finaliza*/
                        JOptionPane.showMessageDialog(null, "Expediente Registrado", "Registro de Expediente", JOptionPane.INFORMATION_MESSAGE);

                    } else {
                        JOptionPane.showMessageDialog(null, "Archivo demasiado Grande, debe ser menor a 5 MegaBytes");
                    }               
                } else{
                    pase.setFechaRegistro(dpFechaRegistro.getDate());
                    pase.setFechaDestino(dpFechaPase.getDate());
                    pase.setMovimiento("salida");
                    pase.setMotivo(taMotivo.getText());
                    pase.setTramite((String) cbTramite.getSelectedItem());
                    pase.setBorrado(false);
                    pase.setNum_fojas(Integer.parseInt(tfNum_foja.getText()));
                    em.persist(pase);
                    em.getTransaction().commit();
                    this.dispose();
                    JOptionPane.showMessageDialog(null, "Transaccion Completa", "Registro de Entrada", JOptionPane.INFORMATION_MESSAGE);
                }//else if
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error tratando de registrar" + e, "Registro Entrada", JOptionPane.INFORMATION_MESSAGE);
                e.printStackTrace();
                em.getTransaction().rollback();
            } finally {
                em.close();
                emf.close();
            }

        }
    }
    private boolean longitudArchivoValida(File archivoEntrada) {
        // Get length of file in bytes
        long fileSizeInBytes = archivoEntrada.length();
        // Convert the bytes to Kilobytes (1 KB = 1024 Bytes)
        long fileSizeInKB = fileSizeInBytes / 1024;
        // Convert the KB to MegaBytes (1 MB = 1024 KBytes)
        long fileSizeInMB = fileSizeInKB / 1024;
        return fileSizeInMB < 5;
    }
    
    private void modificacionEntrada() {
        int respuesta;
        respuesta = JOptionPane.showConfirmDialog(null, "¿Esta Por Modificar los Datos del Pase solicitado, Desea Continuar?", "Modificar", JOptionPane.YES_NO_OPTION);
        if (respuesta == JOptionPane.YES_OPTION) {
            try {
                if (tfDocumento.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Debe seleccionar un documento 'Nota/Expediente/Resolucion'");
                    cbTramite.grabFocus();
                } else if (lbl1.getText().isEmpty() && tfOtroEmisor.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Debe Seleccionar un Investigador o Area de Origen");
                    cbInvestigadorAre.grabFocus();
                } else if (taMotivo.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Debe Escribir el motivo del pase");
                    taMotivo.grabFocus();
                } else {

                    pase.setReceptor(user);
                    if (cbTramite.getSelectedItem().equals("Nota") && !tfDocumento.getText().isEmpty()) {
                        pase.setNota(nota);
                    }
                    if (cbTramite.getSelectedItem().equals("Expediente") && !tfDocumento.getText().isEmpty()) {
                        pase.setExpediente(expe);
                    }
                    if (cbTramite.getSelectedItem().equals("Resolucion") && !tfDocumento.getText().isEmpty()) {
                        pase.setResolucion(resolucion);
                    }
                    //cambios le seteamos el archivo de la nota al pase
                    if (cbTramite.getSelectedItem().equals("Nota") && !tfDocumento.getText().isEmpty()) {
                        pase.setResolucion(resolucion);
                    }
                    if (cbTramite.getSelectedItem().equals("Correspondencia") && !tfDocumento.getText().isEmpty()) {
                        pase.setCorrespondencia(cor);
                    }

                    if (cbInvestigadorAre.getSelectedItem().equals("Investigador") && !lbl1.getText().isEmpty()) {
                        pase.setInvestigadorEmisor(investigador);
                    }
                    if (cbInvestigadorAre.getSelectedItem().equals("Area") && !lbl1.getText().isEmpty()) {
                        pase.setAreaEmisor(area);
                    }

                    if (cbInvestigadorAre.getSelectedItem().equals("Otros") && !tfOtroEmisor.getText().isEmpty()) {
                        if(!otroEmisorString.equals(tfOtroEmisor.getText())){
                            System.out.println("si se da de alta otro emisor");
                        otro = new OtrosEmisoresReceptores();
                        otro.setDescripcion(tfOtroEmisor.getText());
                        OtrosEmisoresReceptoresFacade.getInstance().alta(otro);
                        pase.setOtroEmisor(otro);
                        }
                        else{
                        System.out.println("no se da de alta otro emisor");
                        }
                    }

                    //
                    pase.setFechaRegistro(dpFechaRegistro.getDate());
                    pase.setFechaRecepcion(dpFechaEmision.getDate());
                    pase.setMovimiento("entrada");
                    pase.setMotivo(taMotivo.getText());
                    pase.setTramite((String) cbTramite.getSelectedItem());
                    pase.setBorrado(false);
                    PaseFacade.getInstance().modificar(pase);
                    JOptionPane.showMessageDialog(null, "Datos del Pase Modificados");
                    this.dispose();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error: " + e);
            }
        }
    }

    private void modificacionSalida() {
        int respuesta;
        respuesta = JOptionPane.showConfirmDialog(null, "¿Esta Por Modificar los Datos del Pase solicitado, Desea Continuar?", "Modificar", JOptionPane.YES_NO_OPTION);
        if (respuesta == JOptionPane.YES_OPTION) {
            try {
                if (tfDocumento.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Debe seleccionar un documento 'Nota/Expediente/Resolucion'");
                    cbTramite.grabFocus();
                } else if (lbl2.getText().isEmpty() && tfOtroDestino.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Debe Seleccionar un Investigador o Area de Origen");
                    cbInvestigadorAre1.grabFocus();
                } else if (taMotivo.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Debe Escribir el motivo del pase");
                    taMotivo.grabFocus();
                } else {

                    pase.setReceptor(user);
                    if (cbTramite.getSelectedItem().equals("Nota") && !tfDocumento.getText().isEmpty()) {
                        pase.setNota(nota);
                    }
                    if (cbTramite.getSelectedItem().equals("Expediente") && !tfDocumento.getText().isEmpty()) {
                        pase.setExpediente(expe);
                    }
                    if (cbTramite.getSelectedItem().equals("Resolucion") && !tfDocumento.getText().isEmpty()) {
                        pase.setResolucion(resolucion);
                    }
                    //cambios le seteamos el archivo de la nota al pase
                    if (cbTramite.getSelectedItem().equals("Nota") && !tfDocumento.getText().isEmpty()) {
                        pase.setResolucion(resolucion);
                    }
                    if (cbTramite.getSelectedItem().equals("Correspondencia") && !tfDocumento.getText().isEmpty()) {
                        pase.setCorrespondencia(cor);
                    }

                    if (cbInvestigadorAre1.getSelectedItem().equals("Investigador") && !lbl1.getText().isEmpty()) {
                        pase.setInvestigadorDestino(investigador);
                    }
                    if (cbInvestigadorAre1.getSelectedItem().equals("Area") && !lbl1.getText().isEmpty()) {
                        pase.setAreaDestino(area);
                    }
                    if (cbInvestigadorAre1.getSelectedItem().equals("Otros") && !tfOtroDestino.getText().isEmpty()) {
                         if(!otroDestinoString.equals(tfOtroDestino.getText())){
                             System.out.println("si se da de alta otro destino");
                        otro = new OtrosEmisoresReceptores();
                        otro.setDescripcion(tfOtroDestino.getText());
                        OtrosEmisoresReceptoresFacade.getInstance().alta(otro);
                        pase.setOtroDestino(otro);
                        }
                         else{
                             System.out.println("no se da de alta otro destino");
                         }
                    }

                    //En modificacion salida editamos solo fecha registro y fecha pase que seria el movimiento o la salida que salio fisicamente
                    pase.setFechaRegistro(dpFechaRegistro.getDate());
                    pase.setFechaDestino(dpFechaPase.getDate());
                    pase.setMovimiento("salida");
                    pase.setMotivo(taMotivo.getText());
                    pase.setTramite((String) cbTramite.getSelectedItem());
                    pase.setBorrado(false);
                    PaseFacade.getInstance().modificar(pase);
                    JOptionPane.showMessageDialog(null, "Datos del Pase Modificados");
                    this.dispose();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error: " + e);
            }
        }
    }

    private void inicializarModificacion() {
        if (entradaSalida) {
            Comunes.activarComponentesPanel(pnEmisor);
            Comunes.desactivarComponentesPanel(pnDestino);

        } else {
            Comunes.activarComponentesPanel(pnDestino);
            Comunes.desactivarComponentesPanel(pnEmisor);

        }
        jbNuevo_tramite.setEnabled(false);
        Comunes.desactivarComponentesPanel(pnAgregarArchivo);
        traerPase();
        cargarFormulario();
    }

    private void traerPase() {
        try {
            pase = PaseFacade.getInstance().buscar(idPase);
            if (pase.getExpediente() != null) {
                expe = pase.getExpediente();
            }
            if (pase.getNota() != null) {
                nota = pase.getNota();
            }
            if (pase.getResolucion() != null) {
                resolucion = pase.getResolucion();
            }
            if (pase.getCorrespondencia()!= null) {
                cor = pase.getCorrespondencia();
            }            
            if (entradaSalida) {
                if (pase.getAreaEmisor() != null) {
                    area = pase.getAreaEmisor();
                }
                if (pase.getInvestigadorEmisor() != null) {
                    investigador = pase.getInvestigadorEmisor();
                }
            } else {
                if (pase.getAreaDestino() != null) {
                    area = pase.getAreaDestino();
                }
                if (pase.getInvestigadorDestino() != null) {
                    investigador = pase.getInvestigadorDestino();
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Mensaje " + e);
        }
    }

    private void cargarFormulario() {
        inicializarComboTramite();
        if (pase.getTramite().equals("Nota")) {
            cbTramite.setSelectedIndex(0);
        }
        if (pase.getTramite().equals("Resolucion")) {
            cbTramite.setSelectedIndex(1);
        }
        if (pase.getTramite().equals("Expediente")) {
            cbTramite.setSelectedIndex(2);
        }
        if (pase.getTramite().equals("Correspondencia")) {
            cbTramite.setSelectedIndex(3);
        }
        
        //Num de fojas
        tfNum_foja.setText(String.valueOf(pase.getNum_fojas()));

        //fecha de registro del pase
        if (pase.getFechaRegistro() != null) {
            dpFechaRegistro.setFormats(new SimpleDateFormat("dd/MM/yyyy"));
            dpFechaRegistro.setDate(pase.getFechaRegistro());
        }

        //Fecha Emision
        if (pase.getFechaRecepcion() != null) {
            dpFechaEmision.setFormats(new SimpleDateFormat("dd/MM/yyyy"));
            dpFechaEmision.setDate(pase.getFechaRecepcion());
        }

        //Fecha Pase
        if (pase.getFechaDestino() != null) {
            dpFechaPase.setFormats(new SimpleDateFormat("dd/MM/yyyy"));
            dpFechaPase.setDate(pase.getFechaDestino());
        }

        //inicializar Emisor
        if (pase.getInvestigadorEmisor() != null) {
            lbl1.setText(pase.getInvestigadorEmisor().toString());
            cbInvestigadorAre.setSelectedIndex(0);
            tfOtroEmisor.setEnabled(false);
        }
        if (pase.getAreaEmisor() != null) {
            lbl1.setText(pase.getAreaEmisor().toString());
            cbInvestigadorAre.setSelectedIndex(1);
            tfOtroEmisor.setEnabled(false);
        }
        if (pase.getOtroEmisor() != null) {
            tfOtroEmisor.setText(pase.getOtroEmisor().toString());
            cbInvestigadorAre.setSelectedIndex(2);
            tfOtroEmisor.setEnabled(true);
            otroEmisorString = tfOtroEmisor.getText();
        }
        //inicializar Destino
        if (pase.getInvestigadorDestino() != null) {
            lbl2.setText(pase.getInvestigadorDestino().toString());
            cbInvestigadorAre1.setSelectedIndex(0);
            tfOtroDestino.setEnabled(false);
        }
        if (pase.getAreaDestino() != null) {
            lbl2.setText(pase.getAreaDestino().toString());
            cbInvestigadorAre1.setSelectedIndex(1);
            tfOtroDestino.setEnabled(false);

        }
        if (pase.getOtroDestino() != null) {
            tfOtroDestino.setText(pase.getOtroDestino().toString());
            cbInvestigadorAre1.setSelectedIndex(2);
            tfOtroDestino.setEnabled(true);
            otroDestinoString = tfOtroDestino.getText();
        }
        //Inicializar el Motivo
        if (pase.getMotivo() != null) {
            taMotivo.setText(pase.getMotivo());
        }
        //inicializar intrumento legal
        if (pase.getResolucion() != null) {
            tfDocumento.setText(pase.getResolucion().toString());
        }
        if (pase.getNota() != null) {
            tfDocumento.setText(pase.getNota().toString());
        }
        if (pase.getExpediente()!= null) {
            tfDocumento.setText(pase.getExpediente().toString());
        }     
        if (pase.getCorrespondencia()!= null) {
            tfDocumento.setText(pase.getCorrespondencia().toString());
        }         
    }

    private void inicializarComboTramite() {
        DefaultComboBoxModel modeloComboTramite = new DefaultComboBoxModel();
        modeloComboTramite.addElement("Nota");
        modeloComboTramite.addElement("Resolucion");
        modeloComboTramite.addElement("Expediente");
        modeloComboTramite.addElement("Correspondencia");
        cbTramite.setModel(modeloComboTramite);
        //si es alta activa combo tramite, si es modificacion desactiva el combo
        if (idPase == null) {
            cbTramite.setEnabled(true);
        } else {
            cbTramite.setEnabled(false);
        }

    }//private void inicializarComboTramite()
    
   private void nuevo_buscar_tramite(){
        if (cbTramite.getSelectedIndex() != -1) {
            if(entradaSalida){
                if (cbTramite.getSelectedItem().equals("Expediente")) {
                diagExpediente dlgExp = new diagExpediente(null, true);
                Comunes.centrarDialog(dlgExp);
                dlgExp.setVisible(true);
                if (dlgExp.getExpediente() != null) {
                    expe = dlgExp.getExpediente();
                    lbDocumento.setText("Expediente");
                    cargarExpediente();
                }
                }
                if (cbTramite.getSelectedItem().equals("Nota")) {
                    DialogBuscarNota dlgBN = new DialogBuscarNota(null, true, true, true);
                    Comunes.centrarDialog(dlgBN);
                    dlgBN.setVisible(true);
                    if (dlgBN.getNota() != null) {
                        nota = dlgBN.getNota();
                        lbDocumento.setText("Nota");
                        cargarNota();
                    }
                }
                if (cbTramite.getSelectedItem().equals("Correspondencia")) {
                    DialogBuscarCorrespondencia dlgBC = new DialogBuscarCorrespondencia(null, true);
                    Comunes.centrarDialog(dlgBC);
                    dlgBC.setVisible(true);
                    if (dlgBC.getCorrespondencia() != null) {
                        cor = dlgBC.getCorrespondencia();
                        lbDocumento.setText("Correspondencia");
                        cargarCorrespondencia();
                    }
                }

                if (cbTramite.getSelectedItem().equals("Resolucion")) {
                    diagResolucionChoose dlgRe = new diagResolucionChoose(null, true);
                    Comunes.centrarDialog(dlgRe);
                    dlgRe.setVisible(true);
                    if (dlgRe.getResolucion() != null) {
                        resolucion = dlgRe.getResolucion();
                        tfDocumento.setText(resolucion.getDescripcion());
                    }
                }
                
            }else{
                if (cbTramite.getSelectedItem().equals("Expediente")) {
                    diagExpediente dlgExp = new diagExpediente(null, true, false, false, null);
                    Comunes.centrarDialog(dlgExp);
                    dlgExp.setVisible(true);
                    if (dlgExp.getExpediente() != null) {
                        expe = dlgExp.getExpediente();
                        lbDocumento.setText("Expediente");
                        cargarExpediente();
                    }
                }
                if (cbTramite.getSelectedItem().equals("Nota")) {
                    DialogBuscarNota dlgBN = new DialogBuscarNota(null, true, false, false);
                    Comunes.centrarDialog(dlgBN);
                    dlgBN.setVisible(true);
                    if (dlgBN.getNota() != null) {
                        nota = dlgBN.getNota();
                        lbDocumento.setText("Nota");
                        cargarNota();
                    }
                }
                if (cbTramite.getSelectedItem().equals("Correspondencia")) {
                    DialogBuscarCorrespondencia dlgBC = new DialogBuscarCorrespondencia(null, true, false);
                    Comunes.centrarDialog(dlgBC);
                    dlgBC.setVisible(true);
                    if (dlgBC.getCorrespondencia() != null) {
                        cor = dlgBC.getCorrespondencia();
                        lbDocumento.setText("Correspondencia");
                        cargarCorrespondencia();
                    }
                }

                if (cbTramite.getSelectedItem().equals("Resolucion")) {
                    diagResolucionChoose dlgRe = new diagResolucionChoose(null, true, false);
                    Comunes.centrarDialog(dlgRe);
                    dlgRe.setVisible(true);
                    if (dlgRe.getResolucion() != null) {
                        resolucion = dlgRe.getResolucion();
                        tfDocumento.setText(resolucion.getDescripcion());
                    }
                }
            }//else
            tfNum_foja.grabFocus();
        }//if (cbTramite.getSelectedIndex() != -1)    
   
   }//private void nuevo_buscar_tramite() 
   
    private void seleccionarExpediente() {
        JFileChooser fileChooser = new JFileChooser();
        int seleccion = fileChooser.showOpenDialog(null);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File fichero = fileChooser.getSelectedFile();
            tfRutaCargaExp.setText(fichero.getAbsolutePath());
          this.bCargaArchivo = true;
        }
    }//private void seleccionarExpediente()    

}
