/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.EntradasSalidas;

import entidades.Documento;
import entidades.EntradasSalidas.ArchivoNotas;
import entidades.EntradasSalidas.Correspondencia;
import entidades.EntradasSalidas.Expediente;
import entidades.EntradasSalidas.NotaEntradaSalida;
import entidades.EntradasSalidas.Pase;
import entidades.Resolucion;
import entidades.usuario.Usuario;
import facade.EntradasSalidas.ExpedienteFacade;
import facade.PaseFacade;
import includes.Comunes;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static vista.EntradasSalidas.diagNuevaEntradaSalida.idPase;
import vista.resoluciones.diagResolucionEleccion;

/**
 *
 * @author vouilloz
 */
public class diagEntradas extends javax.swing.JDialog {

    private Usuario user;
    DefaultTableModel modeloEntrada;
    int fila;
    DefaultTableModel modelo;
    private Pase paseEliminacion;

    /**
     * Creates new form diagEntradas
     */
    public diagEntradas(java.awt.Frame parent, boolean modal, Usuario usuario) {
       super(parent, modal);
        initComponents();
        user = usuario;
        traerEntradas(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbEntradas = new javax.swing.JTable();
        btnNuevaEntrada = new javax.swing.JButton();
        btnVerArchivo = new javax.swing.JButton();
        lbTituloEntrada = new javax.swing.JLabel();
        btnEliminarSalida = new javax.swing.JButton();
        btnModificarEntrada = new javax.swing.JButton();
        btnSalirEntradas = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        cbEmisorRemitente = new javax.swing.JComboBox();
        tfEmisorRemitente = new javax.swing.JTextField();
        btBuscar = new javax.swing.JButton();
        pnRadio = new javax.swing.JPanel();
        rbArea = new javax.swing.JRadioButton();
        rbInvestigador = new javax.swing.JRadioButton();
        rbOtro = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        dpFechaRecepcion = new org.jdesktop.swingx.JXDatePicker();
        dpFechaNota = new org.jdesktop.swingx.JXDatePicker();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tbEntradas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tbEntradas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbEntradasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbEntradas);

        btnNuevaEntrada.setText(org.openide.util.NbBundle.getMessage(diagEntradas.class, "diagEntradas.btnNuevaEntrada.text")); // NOI18N
        btnNuevaEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevaEntradaActionPerformed(evt);
            }
        });

        btnVerArchivo.setText(org.openide.util.NbBundle.getMessage(diagEntradas.class, "diagEntradas.btnVerArchivo.text")); // NOI18N
        btnVerArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerArchivoActionPerformed(evt);
            }
        });

        lbTituloEntrada.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        lbTituloEntrada.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTituloEntrada.setText(org.openide.util.NbBundle.getMessage(diagEntradas.class, "diagEntradas.lbTituloEntrada.text")); // NOI18N

        btnEliminarSalida.setText(org.openide.util.NbBundle.getMessage(diagEntradas.class, "diagEntradas.btnEliminarSalida.text")); // NOI18N
        btnEliminarSalida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarSalidaActionPerformed(evt);
            }
        });

        btnModificarEntrada.setText(org.openide.util.NbBundle.getMessage(diagEntradas.class, "diagEntradas.btnModificarEntrada.text")); // NOI18N
        btnModificarEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarEntradaActionPerformed(evt);
            }
        });

        btnSalirEntradas.setText(org.openide.util.NbBundle.getMessage(diagEntradas.class, "diagEntradas.btnSalirEntradas.text")); // NOI18N
        btnSalirEntradas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirEntradasActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(diagEntradas.class, "diagEntradas.jPanel1.border.title"))); // NOI18N

        cbEmisorRemitente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Emisor/Remitente", "Motivo" }));
        cbEmisorRemitente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEmisorRemitenteActionPerformed(evt);
            }
        });

        tfEmisorRemitente.setText(org.openide.util.NbBundle.getMessage(diagEntradas.class, "diagEntradas.tfEmisorRemitente.text")); // NOI18N

        btBuscar.setText(org.openide.util.NbBundle.getMessage(diagEntradas.class, "diagEntradas.btBuscar.text")); // NOI18N
        btBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBuscarActionPerformed(evt);
            }
        });

        pnRadio.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(diagEntradas.class, "diagEntradas.pnRadio.border.title"))); // NOI18N

        buttonGroup1.add(rbArea);
        rbArea.setText(org.openide.util.NbBundle.getMessage(diagEntradas.class, "diagEntradas.rbArea.text")); // NOI18N

        buttonGroup1.add(rbInvestigador);
        rbInvestigador.setText(org.openide.util.NbBundle.getMessage(diagEntradas.class, "diagEntradas.rbInvestigador.text")); // NOI18N

        buttonGroup1.add(rbOtro);
        rbOtro.setText(org.openide.util.NbBundle.getMessage(diagEntradas.class, "diagEntradas.rbOtro.text")); // NOI18N

        javax.swing.GroupLayout pnRadioLayout = new javax.swing.GroupLayout(pnRadio);
        pnRadio.setLayout(pnRadioLayout);
        pnRadioLayout.setHorizontalGroup(
            pnRadioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnRadioLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(pnRadioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbArea)
                    .addComponent(rbInvestigador)
                    .addComponent(rbOtro))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        pnRadioLayout.setVerticalGroup(
            pnRadioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnRadioLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(rbArea)
                .addGap(18, 18, 18)
                .addComponent(rbInvestigador)
                .addGap(18, 18, 18)
                .addComponent(rbOtro)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbEmisorRemitente, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfEmisorRemitente, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(pnRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(cbEmisorRemitente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(btBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(5, 5, 5)
                        .addComponent(tfEmisorRemitente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(pnRadio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(diagEntradas.class, "diagEntradas.jPanel2.border.title"))); // NOI18N

        jLabel1.setText(org.openide.util.NbBundle.getMessage(diagEntradas.class, "diagEntradas.jLabel1.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(diagEntradas.class, "diagEntradas.jLabel2.text")); // NOI18N

        dpFechaRecepcion.setFormats("dd/MM/yyyy");
        dpFechaRecepcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dpFechaRecepcionActionPerformed(evt);
            }
        });

        dpFechaNota.setFormats("dd/MM/yyyy");
        dpFechaNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dpFechaNotaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dpFechaRecepcion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dpFechaNota, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(dpFechaRecepcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(dpFechaNota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        jButton1.setText(org.openide.util.NbBundle.getMessage(diagEntradas.class, "diagEntradas.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(132, 132, 132)
                .addComponent(btnNuevaEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnVerArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEliminarSalida, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnModificarEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSalirEntradas, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbTituloEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 594, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1243, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(443, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbTituloEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNuevaEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVerArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminarSalida, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnModificarEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSalirEntradas, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevaEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaEntradaActionPerformed
        diagNuevaEntradaSalida.idPase = null;
        diagNuevaEntradaSalida.operacion = "alta";
        diagNuevaEntradaSalida.entradaSalida = true;
        diagNuevaEntradaSalida dlgNE = new diagNuevaEntradaSalida(null, true, user);
        dlgNE.setLocation(Comunes.centrarDialog(dlgNE));
        dlgNE.setVisible(true);
        traerEntradas(false);

    }//GEN-LAST:event_btnNuevaEntradaActionPerformed

    private void btnVerArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerArchivoActionPerformed

        fila = tbEntradas.getSelectedRow();
        if (fila != -1 && modeloEntrada.getValueAt(fila, 1).equals("Resolucion")) {
            abrirResolucion();
        } else if (fila != -1 && modeloEntrada.getValueAt(fila, 1).equals("Nota")) {
            abrirNota();
        }else if (fila != -1 && modeloEntrada.getValueAt(fila, 1).equals("Expediente")) {
            abrirExpediente();
        } else if (fila != -1 && modeloEntrada.getValueAt(fila, 1).equals("Correspondencia")) {
            abrirCorrespondencia();
        }
        else {
            JOptionPane.showMessageDialog(null, "Esta Tratando de Abrir un documento, no tiene archivo adjunto");
        }

    }//GEN-LAST:event_btnVerArchivoActionPerformed

    private void btnModificarEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarEntradaActionPerformed
        if (diagNuevaEntradaSalida.idPase != null) {
            diagNuevaEntradaSalida.operacion = "edit";
            diagNuevaEntradaSalida.entradaSalida = true;
            diagNuevaEntradaSalida dlgNE = new diagNuevaEntradaSalida(null, true, user);
            dlgNE.setLocation(Comunes.centrarDialog(dlgNE));
            dlgNE.setVisible(true);
            traerEntradas(false);
        } else {
            JOptionPane.showMessageDialog(null, "Debe Seleccionar un registro de la tabla Entradas");
        }

    }//GEN-LAST:event_btnModificarEntradaActionPerformed

    private void tbEntradasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbEntradasMouseClicked
        seleccionarRegistroTabla();
    }//GEN-LAST:event_tbEntradasMouseClicked

    private void btnSalirEntradasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirEntradasActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnSalirEntradasActionPerformed

    private void btnEliminarSalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarSalidaActionPerformed
        eliminarEntrada();
    }//GEN-LAST:event_btnEliminarSalidaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        traerEntradas(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBuscarActionPerformed
        buscarMotivoRemitente();
    }//GEN-LAST:event_btBuscarActionPerformed

    private void cbEmisorRemitenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEmisorRemitenteActionPerformed
       if(cbEmisorRemitente.getSelectedItem().equals("Emisor/Remitente")){
        Comunes.activarComponentesPanel(pnRadio);
       }else{
       Comunes.desactivarComponentesPanel(pnRadio);
       }
        tfEmisorRemitente.setText("");
    }//GEN-LAST:event_cbEmisorRemitenteActionPerformed

    private void dpFechaRecepcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dpFechaRecepcionActionPerformed
        buscarFechaRecepcion();
    }//GEN-LAST:event_dpFechaRecepcionActionPerformed

    private void dpFechaNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dpFechaNotaActionPerformed
        buscarFechaNota();
    }//GEN-LAST:event_dpFechaNotaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(diagEntradas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(diagEntradas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(diagEntradas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(diagEntradas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                diagEntradas dialog = new diagEntradas(new javax.swing.JFrame(), true, new Usuario());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBuscar;
    private javax.swing.JButton btnEliminarSalida;
    private javax.swing.JButton btnModificarEntrada;
    private javax.swing.JButton btnNuevaEntrada;
    private javax.swing.JButton btnSalirEntradas;
    private javax.swing.JButton btnVerArchivo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cbEmisorRemitente;
    private org.jdesktop.swingx.JXDatePicker dpFechaNota;
    private org.jdesktop.swingx.JXDatePicker dpFechaRecepcion;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbTituloEntrada;
    private javax.swing.JPanel pnRadio;
    private javax.swing.JRadioButton rbArea;
    private javax.swing.JRadioButton rbInvestigador;
    private javax.swing.JRadioButton rbOtro;
    private javax.swing.JTable tbEntradas;
    private javax.swing.JTextField tfEmisorRemitente;
    // End of variables declaration//GEN-END:variables

    private void traerEntradas(boolean bTodas) {
        List<Pase> pases;
        try {
     Calendar cal = new GregorianCalendar();
     //cal.setTimeInMillis(fch.getTime());
     
     cal.add(Calendar.DATE, - 7);
     System.out.println("FECHA ACTUL" + Calendar.getInstance().getTime());             
           if(bTodas) {
            pases = ExpedienteFacade.getInstance().getPasesEntrada();
            cargarPases(pases);           
           } else{
            pases = ExpedienteFacade.getInstance().getPasesEntradaUltSemana(cal.getTime(), Calendar.getInstance().getTime());
            cargarPases(pases);

           }
        } catch (Exception e) {
            Comunes.mensajeError(e, "Error al recuperar los datos de la tabla");

        }
    }


    private void cargarPases(List<Pase> pases) {
//        try {
            String titulos[] = {"Fecha Registro", "Tramite", "N° de Fojas", "Fecha Nota","N° Nota", "Motivo", "Receptor", "Fecha Recepción", "Emisor/Remitente", "Fecha Pase", "Id pase"};
            modeloEntrada = new DefaultTableModel(null, titulos);
            tbEntradas.setModel(modeloEntrada);
            int[] anchos = {30, 50, 5, 50, 10, 150, 50, 25, 100, 25, 5};
            Comunes.definirAnchoColumnas(tbEntradas, anchos);
            // Bucle para cada resultado en la consulta
            for (Pase pase : pases) {

                // Se crea un array que será una de las filas de la tabla.
                Object[] filaTabla = new Object[11]; // Hay tres columnas en la tabla

                filaTabla[0] = new SimpleDateFormat("dd/MM/YYYY").format(pase.getFechaRegistro());
                filaTabla[1] = pase.getTramite();
                try {
                    filaTabla[2] = pase.getNum_fojas();
                } catch (Exception e) {
                }
                
                if (pase.getNota() != null) {
                    filaTabla[3] = new SimpleDateFormat("dd/MM/YYYY").format(pase.getNota().getFechaNota());
                    filaTabla[4] = pase.getNota().getNumero();
                }
                filaTabla[5] = pase.getMotivo();
                filaTabla[6] = pase.getReceptor();
                filaTabla[7] = new SimpleDateFormat("dd/MM/YYYY").format(pase.getFechaRecepcion());
                if (pase.getInvestigadorEmisor() != null) {
                    filaTabla[8] = pase.getInvestigadorEmisor();
                }
                if (pase.getAreaEmisor() != null) {
                    filaTabla[8] = pase.getAreaEmisor();
                }
                if (pase.getOtroEmisor() != null) {
                    filaTabla[8] = pase.getOtroEmisor();
                }
                if (pase.getFechaDestino() != null) {
                    filaTabla[9] = new SimpleDateFormat("dd/MM/YYYY").format(pase.getFechaDestino());
                }
                filaTabla[10] = pase.getId();

                modeloEntrada.addRow(filaTabla);
            }//fin for
            tbEntradas.setModel(modeloEntrada);

            //se crea instancia a clase FormatoTable y se indica columna patron
            FormatoTabla ft = new FormatoTabla(1);
            tbEntradas.setDefaultRenderer(Object.class, ft);

//        }//fin try
//        catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "Error al Extraer los datos" + e);
//        } finally {
//        }

    }

    private void abrirResolucion() {

        try {
            Pase pase = new Pase();
            pase = PaseFacade.getInstance().buscar((Long) modeloEntrada.getValueAt(fila, 10));
            Resolucion res = pase.getResolucion();
            Documento documento = res.getDocumento();
            byte[] archivoInterno = documento.getContenidoArchivo();
            File archivo = File.createTempFile("tmp", documento.getNombreArchivo());
            archivo.deleteOnExit();
            try (FileOutputStream fos = new FileOutputStream(archivo)) {
                fos.write(archivoInterno);
            }
            // Open the file
            if (Desktop.isDesktopSupported() == true) {
                Desktop desktop = Desktop.getDesktop();
                try {
                    if (archivo.exists() == true) {
                        desktop.open(archivo);
                    } else {
                        JOptionPane.showMessageDialog(null, "No se puede encontrar el archivo: " + archivo.getAbsolutePath(), "Aviso", JOptionPane.WARNING_MESSAGE);
                    }
                } catch (IOException e) {
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se puede ejecutar el comando de apertura en este sistema operativo", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        } catch (IOException ex) {
            Logger.getLogger(diagResolucionEleccion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void buscarResolucion() {

    }

    private void seleccionarRegistroTabla() {
        try {
            int fila;
            fila = tbEntradas.getSelectedRow();
            modelo = (DefaultTableModel) tbEntradas.getModel();
System.out.println("IDDD " + (Long) (modelo.getValueAt(fila, 10)));            
            diagNuevaEntradaSalida.idPase = (Long) (modelo.getValueAt(fila, 10));
        }//fin try
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al seleccionar");
        }
    }

    private void abrirNota() {
        try {
            Pase pase = new Pase();
            pase = PaseFacade.getInstance().buscar((Long) modeloEntrada.getValueAt(fila, 10));
            NotaEntradaSalida note = pase.getNota();
            ArchivoNotas archivoN = note.getArchivoNota();
System.out.println("archivoN " + archivoN ); 
if(archivoN != null){
            byte[] archivoInterno = archivoN.getContenidoArchivo();
            File archivo = File.createTempFile("tmp", archivoN.getNombreArchivo());
            archivo.deleteOnExit();
            try (FileOutputStream fos = new FileOutputStream(archivo)) {
                fos.write(archivoInterno);
            }
            // Open the file
            if (Desktop.isDesktopSupported() == true) {
                Desktop desktop = Desktop.getDesktop();
                try {
                    if (archivo.exists() == true) {
                        desktop.open(archivo);
                    } else {
                        JOptionPane.showMessageDialog(null, "No se puede encontrar el archivo: " + archivo.getAbsolutePath(), "Aviso", JOptionPane.WARNING_MESSAGE);
                    }
                } catch (IOException e) {
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se puede ejecutar el comando de apertura en este sistema operativo", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
    }else {
            JOptionPane.showMessageDialog(null, "Esta nota no contiene un archivo", "Aviso", JOptionPane.WARNING_MESSAGE);
    } //else if(archivoN != null){   
        } catch (IOException ex) {
            Logger.getLogger(diagResolucionEleccion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }    
    

    private void eliminarEntrada() {

        fila = tbEntradas.getSelectedRow();
        if (fila != -1) {

            int respuesta;
            respuesta = JOptionPane.showConfirmDialog(null, "¿Esta Por Eliminar el pase, Desea Continuar?", "Modificar", JOptionPane.YES_NO_OPTION);
            if (respuesta == JOptionPane.YES_OPTION) {
//                try {
                    paseEliminacion = PaseFacade.getInstance().buscar((Long) modeloEntrada.getValueAt(fila, 10));
                    paseEliminacion.setBorrado(true);
                    PaseFacade.getInstance().modificar(paseEliminacion);
                    traerEntradas(false);
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(null, "Error: " + e);
//                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe Seleccionar un registro de la tabla");
        }
    }

    private void buscarMotivoRemitente() {
        if (cbEmisorRemitente.getSelectedItem().equals("Emisor/Remitente")) {
            if(rbArea.isSelected()){
            traerXEmisorArea();
            }
            if(rbInvestigador.isSelected()){
            traerXEmisorInvestigador();
            }
            if(rbOtro.isSelected()){
            traerXOtroEmisor();
            }
           
        } else {
            traerMotivo();
        }
    }

    private void traerXEmisorInvestigador() {
        List<Pase> pases;
        try {
            pases = ExpedienteFacade.getInstance().getPasesEmisorInvestigador(tfEmisorRemitente.getText());
            cargarPases(pases);
        } catch (Exception e) {
            Comunes.mensajeError(e, "Error al recuperar los datos de la tabla");

        }
    }

    private void traerMotivo() {
        List<Pase> pases;
        try {
            pases = ExpedienteFacade.getInstance().getPasesMotivo(tfEmisorRemitente.getText());
            cargarPases(pases);
        } catch (Exception e) {
            Comunes.mensajeError(e, "Error al recuperar los datos de la tabla");
        }
    }

    private void buscarFechaRecepcion() {
        List<Pase> pases;
        try {
            pases = ExpedienteFacade.getInstance().getPasesFechaRecepcion(dpFechaRecepcion.getDate());
            cargarPases(pases);
        } catch (Exception e) {
            Comunes.mensajeError(e, "Error al recuperar los datos de la tabla");
        }
    }

    private void buscarFechaNota() {
        List<Pase> pases;
        try {
            pases = ExpedienteFacade.getInstance().getPasesFechaNota(dpFechaNota.getDate());
            cargarPases(pases);
        } catch (Exception e) {
            Comunes.mensajeError(e, "Error al recuperar los datos de la tabla");
        }
    }

    private void traerXEmisorArea() {
        List<Pase> pases;
        try {
            pases = ExpedienteFacade.getInstance().getPasesEmisorArea(tfEmisorRemitente.getText());
            cargarPases(pases);
        } catch (Exception e) {
            Comunes.mensajeError(e, "Error al recuperar los datos de la tabla");

        }
    }

    private void traerXOtroEmisor() {
        List<Pase> pases;
        try {
            pases = ExpedienteFacade.getInstance().getPasesEmisorOtro(tfEmisorRemitente.getText());
            cargarPases(pases);
        } catch (Exception e) {
            Comunes.mensajeError(e, "Error al recuperar los datos de la tabla");

        }
    }
    
    private void abrirExpediente() {
        try {
            Pase pase = new Pase();
            pase = PaseFacade.getInstance().buscar((Long) modeloEntrada.getValueAt(fila, 10));
            Expediente exp = pase.getExpediente();
            Documento doc = exp.getDocumento();
if(doc != null){            
            byte[] archivoInterno = doc.getContenidoArchivo();
            File archivo = File.createTempFile("tmp", doc.getNombreArchivo());
            archivo.deleteOnExit();
            try (FileOutputStream fos = new FileOutputStream(archivo)) {
                fos.write(archivoInterno);
            }
            // Open the file
            if (Desktop.isDesktopSupported() == true) {
                Desktop desktop = Desktop.getDesktop();
                try {
                    if (archivo.exists() == true) {
                        desktop.open(archivo);
                    } else {
                        JOptionPane.showMessageDialog(null, "No se puede encontrar el archivo: " + archivo.getAbsolutePath(), "Aviso", JOptionPane.WARNING_MESSAGE);
                    }
                } catch (IOException e) {
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se puede ejecutar el comando de apertura en este sistema operativo", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
} else{
    JOptionPane.showMessageDialog(null, "Este expediente no contiene un archivo", "Aviso", JOptionPane.WARNING_MESSAGE);
}       
        } catch (IOException ex) {
            Logger.getLogger(diagResolucionEleccion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//private void abrirExpediente()    

    private void abrirCorrespondencia() {
        try {
            Pase pase = new Pase();
            pase = PaseFacade.getInstance().buscar((Long) modeloEntrada.getValueAt(fila, 10));
            Correspondencia corres = pase.getCorrespondencia();
            Documento doc = corres.getDocumento();
if(doc != null){             
            byte[] archivoInterno = doc.getContenidoArchivo();
            File archivo = File.createTempFile("tmp", doc.getNombreArchivo());
            archivo.deleteOnExit();
            try (FileOutputStream fos = new FileOutputStream(archivo)) {
                fos.write(archivoInterno);
            }
            // Open the file
            if (Desktop.isDesktopSupported() == true) {
                Desktop desktop = Desktop.getDesktop();
                try {
                    if (archivo.exists() == true) {
                        desktop.open(archivo);
                    } else {
                        JOptionPane.showMessageDialog(null, "No se puede encontrar el archivo: " + archivo.getAbsolutePath(), "Aviso", JOptionPane.WARNING_MESSAGE);
                    }
                } catch (IOException e) {
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se puede ejecutar el comando de apertura en este sistema operativo", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
} else{
    JOptionPane.showMessageDialog(null, "Esta correspondencia no contiene un archivo", "Aviso", JOptionPane.WARNING_MESSAGE);
}            
        } catch (IOException ex) {
            Logger.getLogger(diagResolucionEleccion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//private void abrirExpediente()        
}
