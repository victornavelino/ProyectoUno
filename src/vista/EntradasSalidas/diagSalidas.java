/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.EntradasSalidas;

import entidades.Documento;
import entidades.EntradasSalidas.ArchivoNotas;
import entidades.EntradasSalidas.Correspondencia;
import entidades.EntradasSalidas.NotaEntradaSalida;
import entidades.EntradasSalidas.Pase;
import entidades.Resolucion;
import entidades.usuario.Usuario;
import facade.ConexionFacade;
import facade.EntradasSalidas.ExpedienteFacade;
import facade.PaseFacade;
import includes.Comunes;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import vista.resoluciones.diagResolucionEleccion;

/**
 *
 * @author vouilloz
 */
public class diagSalidas extends javax.swing.JDialog {

    Usuario user;
    int fila;

    DefaultTableModel modeloSalida;

    DefaultTableModel modelo;

    private Pase paseEliminacion;

    /**
     * Creates new form diagSalidas
     */
    public diagSalidas(java.awt.Frame parent, boolean modal, Usuario usuario) {
        super(parent, modal);
        initComponents();
        user = (Usuario) usuario;
        traerSalidas(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbSalidas = new javax.swing.JTable();
        btnNuevaSalida = new javax.swing.JButton();
        lbTituloSalidas = new javax.swing.JLabel();
        btnVerArchivo = new javax.swing.JButton();
        btnEliminarSalida = new javax.swing.JButton();
        btnModificarSalida = new javax.swing.JButton();
        btnSalirSalidas = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        cbDetinoMotivo = new javax.swing.JComboBox();
        tfDestinoMotivo = new javax.swing.JTextField();
        btBuscar = new javax.swing.JButton();
        pnSeleccion = new javax.swing.JPanel();
        rbArea = new javax.swing.JRadioButton();
        rbInvestigador = new javax.swing.JRadioButton();
        rbOtro = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        dpFechaSalida = new org.jdesktop.swingx.JXDatePicker();
        dpFechaNota = new org.jdesktop.swingx.JXDatePicker();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnMostarSalidas = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tbSalidas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tbSalidas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbSalidasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbSalidas);

        btnNuevaSalida.setText(org.openide.util.NbBundle.getMessage(diagSalidas.class, "diagSalidas.btnNuevaSalida.text")); // NOI18N
        btnNuevaSalida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevaSalidaActionPerformed(evt);
            }
        });

        lbTituloSalidas.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        lbTituloSalidas.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTituloSalidas.setText(org.openide.util.NbBundle.getMessage(diagSalidas.class, "diagSalidas.lbTituloSalidas.text")); // NOI18N

        btnVerArchivo.setText(org.openide.util.NbBundle.getMessage(diagSalidas.class, "diagSalidas.btnVerArchivo.text")); // NOI18N
        btnVerArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerArchivoActionPerformed(evt);
            }
        });

        btnEliminarSalida.setText(org.openide.util.NbBundle.getMessage(diagSalidas.class, "diagSalidas.btnEliminarSalida.text")); // NOI18N
        btnEliminarSalida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarSalidaActionPerformed(evt);
            }
        });

        btnModificarSalida.setText(org.openide.util.NbBundle.getMessage(diagSalidas.class, "diagSalidas.btnModificarSalida.text")); // NOI18N
        btnModificarSalida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarSalidaActionPerformed(evt);
            }
        });

        btnSalirSalidas.setText(org.openide.util.NbBundle.getMessage(diagSalidas.class, "diagSalidas.btnSalirSalidas.text")); // NOI18N
        btnSalirSalidas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirSalidasActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(diagSalidas.class, "diagSalidas.jPanel1.border.title"))); // NOI18N

        cbDetinoMotivo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Destino", "Motivo" }));
        cbDetinoMotivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDetinoMotivoActionPerformed(evt);
            }
        });

        tfDestinoMotivo.setText(org.openide.util.NbBundle.getMessage(diagSalidas.class, "diagSalidas.tfDestinoMotivo.text")); // NOI18N

        btBuscar.setText(org.openide.util.NbBundle.getMessage(diagSalidas.class, "diagSalidas.btBuscar.text")); // NOI18N
        btBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBuscarActionPerformed(evt);
            }
        });

        pnSeleccion.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(diagSalidas.class, "diagSalidas.pnSeleccion.border.title"))); // NOI18N

        buttonGroup1.add(rbArea);
        rbArea.setText(org.openide.util.NbBundle.getMessage(diagSalidas.class, "diagSalidas.rbArea.text")); // NOI18N

        buttonGroup1.add(rbInvestigador);
        rbInvestigador.setText(org.openide.util.NbBundle.getMessage(diagSalidas.class, "diagSalidas.rbInvestigador.text")); // NOI18N

        buttonGroup1.add(rbOtro);
        rbOtro.setText(org.openide.util.NbBundle.getMessage(diagSalidas.class, "diagSalidas.rbOtro.text")); // NOI18N

        javax.swing.GroupLayout pnSeleccionLayout = new javax.swing.GroupLayout(pnSeleccion);
        pnSeleccion.setLayout(pnSeleccionLayout);
        pnSeleccionLayout.setHorizontalGroup(
            pnSeleccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnSeleccionLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnSeleccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbOtro)
                    .addComponent(rbArea)
                    .addComponent(rbInvestigador))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnSeleccionLayout.setVerticalGroup(
            pnSeleccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnSeleccionLayout.createSequentialGroup()
                .addComponent(rbArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(rbInvestigador)
                .addGap(18, 18, 18)
                .addComponent(rbOtro)
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbDetinoMotivo, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfDestinoMotivo, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(pnSeleccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cbDetinoMotivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfDestinoMotivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(btBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(pnSeleccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(diagSalidas.class, "diagSalidas.jPanel4.border.title"))); // NOI18N

        dpFechaSalida.setFormats("dd/MM/yyyy");
        dpFechaSalida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dpFechaSalidaActionPerformed(evt);
            }
        });

        dpFechaNota.setFormats("dd/MM/yyyy");
        dpFechaNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dpFechaNotaActionPerformed(evt);
            }
        });

        jLabel5.setText(org.openide.util.NbBundle.getMessage(diagSalidas.class, "diagSalidas.jLabel5.text")); // NOI18N

        jLabel6.setText(org.openide.util.NbBundle.getMessage(diagSalidas.class, "diagSalidas.jLabel6.text")); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dpFechaSalida, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                    .addComponent(dpFechaNota, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dpFechaSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dpFechaNota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(24, 24, 24))
        );

        btnMostarSalidas.setText(org.openide.util.NbBundle.getMessage(diagSalidas.class, "diagSalidas.btnMostarSalidas.text")); // NOI18N
        btnMostarSalidas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostarSalidasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(256, 256, 256)
                                .addComponent(lbTituloSalidas, javax.swing.GroupLayout.PREFERRED_SIZE, 594, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(101, 101, 101)
                                .addComponent(btnNuevaSalida, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnVerArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnEliminarSalida, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnModificarSalida, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSalirSalidas, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1248, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnMostarSalidas, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbTituloSalidas)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(btnMostarSalidas, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnNuevaSalida, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEliminarSalida, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnModificarSalida, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSalirSalidas, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(btnVerArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevaSalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaSalidaActionPerformed
        diagNuevaEntradaSalida.idPase = null;
        diagNuevaEntradaSalida.operacion = "alta";
        diagNuevaEntradaSalida.entradaSalida = false;
        diagNuevaEntradaSalida dlgNE = new diagNuevaEntradaSalida(null, true, user);
        dlgNE.setLocation(Comunes.centrarDialog(dlgNE));
        dlgNE.setVisible(true);
        traerSalidas(false);
    }//GEN-LAST:event_btnNuevaSalidaActionPerformed

    private void btnVerArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerArchivoActionPerformed
        fila = tbSalidas.getSelectedRow();
        if (fila != -1 && modeloSalida.getValueAt(fila, 1).equals("Resolucion")) {
            abrirResolucion();
        } else if (fila != -1 && modeloSalida.getValueAt(fila, 1).equals("Nota")) {
            abrirNota();
        } else if (fila != -1 && modeloSalida.getValueAt(fila, 1).equals("Correspondencia")) {
            abrirCorrespondencia();
        } else {
            JOptionPane.showMessageDialog(null, "Esta Tratando de Abrir un documento, no tiene archivo adjunto");
        }

    }//GEN-LAST:event_btnVerArchivoActionPerformed

    private void btnModificarSalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarSalidaActionPerformed
        if (diagNuevaEntradaSalida.idPase != null) {
            diagNuevaEntradaSalida.operacion = "edit";
            diagNuevaEntradaSalida.entradaSalida = false;
            diagNuevaEntradaSalida dlgNE = new diagNuevaEntradaSalida(null, true, user);
            dlgNE.setLocation(Comunes.centrarDialog(dlgNE));
            dlgNE.setVisible(true);
            traerSalidas(false);
        } else {
            JOptionPane.showMessageDialog(null, "Debe Seleccionar un registro de la tabla Salidas");
        }
    }//GEN-LAST:event_btnModificarSalidaActionPerformed

    private void tbSalidasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbSalidasMouseClicked
        seleccionarRegistroTabla();
    }//GEN-LAST:event_tbSalidasMouseClicked

    private void btnSalirSalidasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirSalidasActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnSalirSalidasActionPerformed

    private void btnEliminarSalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarSalidaActionPerformed
        eliminarSalida();
    }//GEN-LAST:event_btnEliminarSalidaActionPerformed

    private void cbDetinoMotivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDetinoMotivoActionPerformed
        if (cbDetinoMotivo.getSelectedItem().equals("Destino")) {
            Comunes.activarComponentesPanel(pnSeleccion);
        } else {
            Comunes.desactivarComponentesPanel(pnSeleccion);
        }
        tfDestinoMotivo.setText("");
    }//GEN-LAST:event_cbDetinoMotivoActionPerformed

    private void btBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBuscarActionPerformed
        buscarDestinoMotivo();
    }//GEN-LAST:event_btBuscarActionPerformed

    private void dpFechaSalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dpFechaSalidaActionPerformed
        buscarFechaSalida();
    }//GEN-LAST:event_dpFechaSalidaActionPerformed

    private void dpFechaNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dpFechaNotaActionPerformed
        buscarFechaNota();
    }//GEN-LAST:event_dpFechaNotaActionPerformed

    private void btnMostarSalidasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostarSalidasActionPerformed
       // mostrarTodasSalidas();
        traerSalidas(true);
    }//GEN-LAST:event_btnMostarSalidasActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(diagSalidas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(diagSalidas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(diagSalidas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(diagSalidas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                diagSalidas dialog = new diagSalidas(new javax.swing.JFrame(), true, new Usuario());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBuscar;
    private javax.swing.JButton btnEliminarSalida;
    private javax.swing.JButton btnModificarSalida;
    private javax.swing.JButton btnMostarSalidas;
    private javax.swing.JButton btnNuevaSalida;
    private javax.swing.JButton btnSalirSalidas;
    private javax.swing.JButton btnVerArchivo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cbDetinoMotivo;
    private org.jdesktop.swingx.JXDatePicker dpFechaNota;
    private org.jdesktop.swingx.JXDatePicker dpFechaSalida;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbTituloSalidas;
    private javax.swing.JPanel pnSeleccion;
    private javax.swing.JRadioButton rbArea;
    private javax.swing.JRadioButton rbInvestigador;
    private javax.swing.JRadioButton rbOtro;
    private javax.swing.JTable tbSalidas;
    private javax.swing.JTextField tfDestinoMotivo;
    // End of variables declaration//GEN-END:variables

    private void traerSalidas(boolean bTodas) {
     Calendar cal = new GregorianCalendar();
     cal.add(Calendar.DATE, - 7);
        List<Pase> pases;
        try {
            
           if(bTodas) {
            pases = ExpedienteFacade.getInstance().getPasesSalida();
            cargarPases(pases);           
           } else{
            pases = ExpedienteFacade.getInstance().getPasesSalidaUltSemana(cal.getTime(), Calendar.getInstance().getTime());
            cargarPases(pases);
           }            

        } catch (Exception e) {
            Comunes.mensajeError(e, "Error al recuperar los datos de la tabla");

        }
    }

    private void cargarPases(List<Pase> pases) {
        try {
            String titulos[] = {"Fecha Registro", "Tramite", "N° de Fojas", "Fecha Nota", "N° Nota", "Destino", "Motivo", "Receptor", "Fecha Salida", "id"};
            modeloSalida = new DefaultTableModel(null, titulos);
            tbSalidas.setModel(modeloSalida);
            int[] anchos = {30, 50, 5, 30, 5, 80, 150, 50, 30, 5};
            Comunes.definirAnchoColumnas(tbSalidas, anchos);

            for (Pase pase : pases) {

                Object[] filaTabla = new Object[10];

                filaTabla[0] = new SimpleDateFormat("dd/MM/YYYY").format(pase.getFechaRegistro());
                filaTabla[1] = pase.getTramite();
                try {
                    filaTabla[2] = pase.getNum_fojas();
                } catch (Exception e) {
                }

                if (pase.getNota() != null) {
                    filaTabla[3] = new SimpleDateFormat("dd/MM/YYYY").format(pase.getNota().getFechaNota());
                    filaTabla[4] = pase.getNota().getNumero();
                }
                if (pase.getInvestigadorDestino() != null) {
                    filaTabla[5] = pase.getInvestigadorDestino();
                }
                if (pase.getAreaDestino() != null) {
                    filaTabla[5] = pase.getAreaDestino();
                }
                if (pase.getOtroDestino() != null) {
                    filaTabla[5] = pase.getOtroDestino();
                }
                filaTabla[6] = pase.getMotivo();
                filaTabla[7] = pase.getReceptor();
                if (pase.getFechaDestino() != null) {
                    filaTabla[8] = new SimpleDateFormat("dd/MM/YYYY").format(pase.getFechaDestino());
                }
                filaTabla[9] = pase.getId();

                modeloSalida.addRow(filaTabla);
            }//fin for
            tbSalidas.setModel(modeloSalida);

            //se crea instancia a clase FormatoTable y se indica columna patron
            FormatoTabla ft = new FormatoTabla(1);
            tbSalidas.setDefaultRenderer(Object.class, ft);

        }//fin try
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al Extraer los datos" + e);
        } finally {
        }

    }

    private void abrirResolucion() {

        try {
            Pase pase = PaseFacade.getInstance().buscar((Long) modeloSalida.getValueAt(fila, 9));
            Resolucion res = pase.getResolucion();
            Documento documento = res.getDocumento();
            byte[] archivoInterno = documento.getContenidoArchivo();
            File archivo = File.createTempFile("tmp", documento.getNombreArchivo());
            archivo.deleteOnExit();
            try (FileOutputStream fos = new FileOutputStream(archivo)) {
                fos.write(archivoInterno);
            }
            // Open the file
            if (Desktop.isDesktopSupported() == true) {
                Desktop desktop = Desktop.getDesktop();
                try {
                    if (archivo.exists() == true) {
                        desktop.open(archivo);
                    } else {
                        JOptionPane.showMessageDialog(null, "No se encontrar el archivo: " + archivo.getAbsolutePath(), "Aviso", JOptionPane.WARNING_MESSAGE);
                    }
                } catch (IOException e) {
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se puede ejecutar el comando de apertura en este sistema operativo", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        } catch (IOException ex) {
            Logger.getLogger(diagResolucionEleccion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void abrirNota() {
        try {
            Pase pase = new Pase();
            pase = PaseFacade.getInstance().buscar((Long) modeloSalida.getValueAt(fila, 9));
            NotaEntradaSalida note = pase.getNota();
            ArchivoNotas archivoN = note.getArchivoNota();
System.out.println("archivoN " + archivoN ); 
if(archivoN != null){
            byte[] archivoInterno = archivoN.getContenidoArchivo();
            File archivo = File.createTempFile("tmp", archivoN.getNombreArchivo());
            archivo.deleteOnExit();
            try (FileOutputStream fos = new FileOutputStream(archivo)) {
                fos.write(archivoInterno);
            }
            // Open the file
            if (Desktop.isDesktopSupported() == true) {
                Desktop desktop = Desktop.getDesktop();
                try {
                    if (archivo.exists() == true) {
                        desktop.open(archivo);
                    } else {
                        JOptionPane.showMessageDialog(null, "No se puede encontrar el archivo: " + archivo.getAbsolutePath(), "Aviso", JOptionPane.WARNING_MESSAGE);
                    }
                } catch (IOException e) {
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se puede ejecutar el comando de apertura en este sistema operativo", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
    }else {
            JOptionPane.showMessageDialog(null, "Esta nota no contiene un archivo", "Aviso", JOptionPane.WARNING_MESSAGE);
    } //else if(archivoN != null){   
        } catch (IOException ex) {
            Logger.getLogger(diagResolucionEleccion.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }

    private void seleccionarRegistroTabla() {
        try {
            int fila;
            fila = tbSalidas.getSelectedRow();
            modelo = (DefaultTableModel) tbSalidas.getModel();
            System.out.println("IDDD " + (Long) (modelo.getValueAt(fila, 9)));
            diagNuevaEntradaSalida.idPase = (Long) (modelo.getValueAt(fila, 9));
        }//fin try
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al seleccionar" + e);
        }
    }

    private void eliminarSalida() {
        fila = tbSalidas.getSelectedRow();
        if (fila != -1) {

            int respuesta;
            respuesta = JOptionPane.showConfirmDialog(null, "¿Esta Por Eliminar el pase, Desea Continuar?", "Modificar", JOptionPane.YES_NO_OPTION);
            if (respuesta == JOptionPane.YES_OPTION) {
                try {
                    paseEliminacion = PaseFacade.getInstance().buscar((Long) modeloSalida.getValueAt(fila, 9));
                    paseEliminacion.setBorrado(true);
                    PaseFacade.getInstance().modificar(paseEliminacion);
                    traerSalidas(false);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error: " + e);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe Seleccionar un registro de la tabla");
        }
    }

    private void buscarDestinoMotivo() {
        if (cbDetinoMotivo.getSelectedItem().equals("Destino")) {
            if (rbArea.isSelected()) {
                traerDetinosArea();
            }
            if (rbInvestigador.isSelected()) {
                traerDetinosInvestigador();
            }
            if (rbOtro.isSelected()) {
                traerDetinosOtro();
            }

        } else {
            traerMotivo();
        }
    }

    private void traerMotivo() {
        List<Pase> pases;
        try {
            pases = ExpedienteFacade.getInstance().getPasesMotivoSalida(tfDestinoMotivo.getText());
            cargarPases(pases);
        } catch (Exception e) {
            Comunes.mensajeError(e, "Error al recuperar los datos de la tabla");

        }
    }

    private void buscarFechaSalida() {
        List<Pase> pases;
        try {
            pases = ExpedienteFacade.getInstance().getPasesFechaSalida(dpFechaSalida.getDate());
            cargarPases(pases);
        } catch (Exception e) {
            Comunes.mensajeError(e, "Error al recuperar los datos de la tabla");
        }
    }

    private void buscarFechaNota() {
        List<Pase> pases;
        try {
            pases = ExpedienteFacade.getInstance().getPasesFechaNotaSalida(dpFechaNota.getDate());
            cargarPases(pases);
        } catch (Exception e) {
            Comunes.mensajeError(e, "Error al recuperar los datos de la tabla");
        }
    }

    private void mostrarTodasSalidas() {
        List<Pase> pases;
        try {
            pases = ExpedienteFacade.getInstance().getPasesSalida();
            cargarPases(pases);
        } catch (Exception e) {
            Comunes.mensajeError(e, "Error al recuperar los datos de la tabla");

        }
    }

    private void traerDetinosInvestigador() {
        List<Pase> pases;
        try {
            pases = ExpedienteFacade.getInstance().getPasesDestinoInvestigador(tfDestinoMotivo.getText());
            cargarPases(pases);
        } catch (Exception e) {
            Comunes.mensajeError(e, "Error al recuperar los datos de la tabla");

        }
    }

    private void traerDetinosArea() {
        List<Pase> pases;
        try {
            pases = ExpedienteFacade.getInstance().getPasesDestinoArea(tfDestinoMotivo.getText());
            cargarPases(pases);
        } catch (Exception e) {
            Comunes.mensajeError(e, "Error al recuperar los datos de la tabla");

        }
    }

    private void traerDetinosOtro() {
        List<Pase> pases;
        try {
            pases = ExpedienteFacade.getInstance().getPasesDestinoOtro(tfDestinoMotivo.getText());
            cargarPases(pases);
        } catch (Exception e) {
            Comunes.mensajeError(e, "Error al recuperar los datos de la tabla");

        }
    }

    private void abrirCorrespondencia() {
       
        try {
            Pase pase = new Pase();
            pase = PaseFacade.getInstance().buscar((Long) modeloSalida.getValueAt(fila, 9));
            Correspondencia corres = pase.getCorrespondencia();
            Documento doc = corres.getDocumento();
if(doc != null){             
            byte[] archivoInterno = doc.getContenidoArchivo();
            File archivo = File.createTempFile("tmp", doc.getNombreArchivo());
            archivo.deleteOnExit();
            try (FileOutputStream fos = new FileOutputStream(archivo)) {
                fos.write(archivoInterno);
            }
            // Open the file
            if (Desktop.isDesktopSupported() == true) {
                Desktop desktop = Desktop.getDesktop();
                try {
                    if (archivo.exists() == true) {
                        desktop.open(archivo);
                    } else {
                        JOptionPane.showMessageDialog(null, "No se puede encontrar el archivo: " + archivo.getAbsolutePath(), "Aviso", JOptionPane.WARNING_MESSAGE);
                    }
                } catch (IOException e) {
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se puede ejecutar el comando de apertura en este sistema operativo", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
} else{
    JOptionPane.showMessageDialog(null, "Esta correspondencia no contiene un archivo", "Aviso", JOptionPane.WARNING_MESSAGE);
}            
        } catch (IOException ex) {
            Logger.getLogger(diagResolucionEleccion.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }//    

}
